{"version":3,"file":"mider.js","mappings":"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","sources":["webpack://mider/webpack/universalModuleDefinition","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/ArrayBuffer.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/js/math.polyfills.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/string.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/math.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/common/src/generated/_Arrays.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/common/src/generated/_Collections.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/common/src/generated/_Ranges.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/common/src/generated/_Sequences.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractCollection.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractList.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractMap.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractSet.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/Collections.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/Iterables.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/Maps.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/PrimitiveIterators.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/Sequences.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/util/Preconditions.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/Sets.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/internal/progressionUtil.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/properties/Delegates.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/ranges/PrimitiveRanges.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/ranges/ProgressionIterators.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/ranges/Progressions.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/Appendable.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/Char.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/char.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/common/src/generated/_Strings.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/HexExtensions.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/CharCode.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/HexFormat.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/StringNumberConversions.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/Strings.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/stringsCode.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/builtins/Library.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/src/kotlin/exceptions.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/util/Tuples.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/core/builtins/native/kotlin/Number.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/kotlinHacks.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashMap.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableList.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayList.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArraySorting.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/EqualityComparator.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashMap.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashSet.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/console.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/numbers.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/CharacterCodingExceptionJs.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/src/generated/_WhitespaceChars.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/src/generated/_DigitChars.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/regex.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/src/generated/_ComparisonsJs.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/text/utf8Encoding.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/builtins/Char.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/builtins/Enum.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/BitMask.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/arrays.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/noPackageHacks.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/bitUtils.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/runtimeForStdLib.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/charSequence.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/numberConversion.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShort.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/collectionsHacks.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/compareTo.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/coreRuntime.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/typeCheckUtils.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/hacks.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/long.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/longjs.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/rangeTo.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/runtime/reflectRuntime.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/src/generated/_ArraysJs.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/text/StringBuilder.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/regexp.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/collections/MutableCollections.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/src/generated/_CollectionsJs.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/InMusicScore.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/Event.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/HexUtils.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/impl/extension.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/Message.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/MidiData.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/MidiFile.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/MidiInstrument.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/Track.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/code/MiderCodeParser.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/utils.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/Note.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/code/MidiProduceCore.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/convert.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/xml/Generator.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/Appoggiatura.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/Chord.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/DurationDescribe.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/Glissando.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/InMusicScoreMidiNormalEvent.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/RelativeTicks.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/Rest.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/Scale.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/descr/TieNote.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/dsl/MiderDSL.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/dsl/NormalChannelDispatcher.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/dsl/func.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/impl/Stack.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/lyric/utils.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://mider/../../../../src/commonMain/kotlin/org/mider/xml/Node.kt","webpack://mider/../../../../src/jsMain/kotlin/App.kt","webpack://mider/../../../../src/jsMain/kotlin/org/mider/expect/ByteBuffer.js.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/src/kotlin/experimental/bitwiseOperations.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/commonMainSources/libraries/stdlib/common/src/generated/_Maps.kt","webpack://mider/../../../../compileSync/js/main/productionExecutable/kotlin/libraries/stdlib/js/src/org.w3c/org.khronos.webgl.kt","webpack://mider/webpack/bootstrap","webpack://mider/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mider\"] = factory();\n\telse\n\t\troot[\"mider\"] = factory();\n})(this, () => {\nreturn ",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package org.mider.descr\nimport org.mider.impl.Cloneable\nimport kotlin.math.abs\n\ninterface InMusicScore: Cloneable {\n    val duration: DurationDescribe\n    override fun clone(): InMusicScore\n\n    operator fun timesAssign(times: Int) {\n        if (times > 0) {\n            for (i in 0..< times)\n                duration.double\n        } else if (times < 0) {\n            for (i in 0..< abs(times))\n                duration.halve\n        }\n    }\n}\n\ninterface HasFlatAndSharp {\n    fun sharp(times: Int = 1)\n    fun flap(times: Int = 1)\n}\n\ninterface HasOctave {\n    fun higherOctave(pitch: Int = 1)\n    fun lowerOctave(pitch: Int = 1)\n}\n\ninterface CanModifyTargetVelocity {\n    fun modifyTargetVelocity(value: Int)\n\n    fun modifyTargetOnVelocity(value: Int) {\n        modifyTargetVelocity(value)\n    }\n\n    fun modifyTargetOffVelocity(value: Int) {\n        modifyTargetVelocity(value)\n    }\n}\n\ninterface CanModifyTargetDuration {\n    fun getTargetDuration(): DurationDescribe\n}\n\ninterface CanModifyTargetPitch {\n    fun modifyTargetPitch(given: Int)\n}\n\ninterface NoteContainer {\n\n    val notes: MutableList<Note>\n\n    operator fun plusAssign(note: Note) {\n        notes += note\n    }\n\n    operator fun minusAssign(note: Note) {\n        notes -= note\n    }\n\n    fun last() = notes.last()\n}\n\n/**\n * 标记一个在乐谱中不发出声音的\n */\ninterface Mute","package org.mider\n\nimport org.mider.expect.ByteBuffer\nimport kotlin.experimental.or\n\ninterface IEvent : HasByteSize, HexData {\n    fun generateData(): ByteArray\n}\n\nenum class EventType(val operateCode: Byte) {\n    note_on(0x90.toByte()), note_off(0x80.toByte()), program_change(0xc0.toByte()),\n    control_change(0xb0.toByte()), aftertouch(0xd0.toByte()), glide(0xe0.toByte()),\n    keyaftertouch(0xa0.toByte()), sysex(0xf0.toByte())\n}\n\nclass Event(val type: EventType, val args: ByteArray, val track: Byte = 0) : IEvent {\n\n    constructor(type: EventType, arg: Byte, track: Byte = 0) : this(type, byteArrayOf(arg), track)\n    constructor(type: EventType, track: Byte = 0) : this(type, 0, track)\n\n    override fun generateData(): ByteArray {\n        val bytes = ByteArrayWrap(getOccupiedBytes())\n        bytes += type.operateCode or track\n        bytes += args\n        return !bytes\n    }\n\n    override fun getOccupiedBytes() = 1 + args.size\n\n    override fun getHexDataAsByteBuffer(): ByteBuffer {\n        val occupied = getOccupiedBytes()\n        val buffer = ByteBuffer.allocate(occupied)\n        val actualOperateCode = type.operateCode or track\n        with(buffer) {\n            put(actualOperateCode)\n            if (args.isNotEmpty()) put(args)\n            flip()\n        }\n        return buffer\n    }\n\n    override fun toString(): String {\n        return \"[type: $type, args: ${args.asList()}, track: $track]\"\n    }\n}\n\nenum class MetaEventType(val operateCode: Byte) {\n    META_TEMPO(0x51), META_END_OF_TRACK(0x2f),\n    META_KEY_SIGNATURE (0x59),\n    META_TIME_SIGNATURE(0x58)\n}\n\nclass MetaEvent(val type: MetaEventType = MetaEventType.META_END_OF_TRACK, val data: ByteArray = HexConst.emptyData) : IEvent {\n\n    private val arg_length: ByteArray\n        get() = data.size.asvlByteArray()\n\n    override fun getHexDataAsByteBuffer(): ByteBuffer {\n        val occupied = getOccupiedBytes()\n        val buffer = ByteBuffer.allocate(occupied)\n        with(buffer) {\n            put(type.operateCode)\n            put(arg_length)\n            if (data.isNotEmpty()) put(data)\n            flip()\n        }\n        return buffer\n    }\n\n    override fun generateData(): ByteArray {\n        val bytes = ByteArrayWrap(getOccupiedBytes())\n        bytes += type.operateCode\n        bytes += arg_length\n        bytes += data\n        return !bytes\n    }\n\n    override fun toString(): String {\n        return \"[type: $type, length: ${arg_length.asList()}, args: ${data.asList()}]\"\n    }\n\n    override fun getOccupiedBytes() = 1 + arg_length.size + data.size\n}","package org.mider\n\nimport org.mider.impl.toByteArray\nimport kotlin.math.ln\n\n//private val noteRegex = Regex(\"(on|off) *([b#]?[a-gA-G])(\\\\d?)(\\\\s*[, ]\\\\s*\\\\d+|[-+.~]+)?(\\\\s*[, ]\\\\s*\\\\d{1,3})?(\\\\s*[, ]\\\\s*\\\\d{1,2})?\")\nprivate val noteRegex = Regex(\"(on|off) *([b#]?[a-gA-G])(\\\\d?)(\\\\s*[, ]\\\\s*\\\\d+|([-+.~]|[/x]\\\\d)+)?(\\\\s*[, ]\\\\s*\\\\d{1,3})?(\\\\s*[, ]\\\\s*\\\\d{1,2})?\")\nprivate val instrumentRegex = Regex(\"i([a-fA-F]|\\\\d{1,2})?\\\\s*=\\\\s*(\\\\d{1,3}|[0-9a-zA-Z_ -]+)(\\\\s*[, ]\\\\s*\\\\d{1,3})?\")\nprivate val controllerRegex = Regex(\"c([a-fA-F]|\\\\d{1,2})?\\\\s*=\\\\s*\\\\d{1,3}\\\\s*,\\\\s*\\\\d{1,3}(\\\\s*[, ]\\\\s*\\\\d{1,3})?\")\nprivate val hexRegex = Regex(\"([0-9a-fA-F]{1,2} )*[0-9a-fA-F]{1,2}\")\nprivate val instanceHexRegex = Regex(\"[0-9a-fA-F]+\")\nprivate val titleRegex = Regex(\"title .+\")\nprivate val programNameRegex = Regex(\"instrumentName .+\")\nprivate val lyricRegex = Regex(\"lyric .+\")\n\nfun String.parseToMidiHex(wholeTick: Int, defaultOctave: Int = 4, defaultVelocity: Int = 100, defaultDuration: Int = 4, previousTicks: Int = 0, delimiter: String = \" \"): ByteArray = when {\n\n    this matches hexRegex ->\n        split(delimiter).map { byte -> byte.toInt(16).toByte() }.toByteArray()\n\n    this matches instanceHexRegex -> {\n        if (length % 2 != 0) throw Exception(\"length of given hex data is expected to be even.\") else {\n            val list = mutableListOf<String>()\n            forEachIndexed { index, char ->\n                if (index % 2 == 1) list += this[index - 1].toString() + char\n            }\n            list.map { byte -> byte.toInt(16).toByte() }.toByteArray()\n        }\n    }\n\n    this matches noteRegex -> {\n\n        val values = noteRegex.find(this)?.groupValues\n        val operation = values?.get(1)\n        val name = values?.get(2)\n        val octave = values?.get(3)?.toIntOrNull() ?: run {\n            name?.let {\n                if (it.last() in 'a' .. 'g') defaultOctave\n                else if (it.last() in 'A' .. 'G') defaultOctave + 1\n                else throw Exception(\"no such note name: $it\")\n            }\n        } ?: defaultOctave\n        val timeDesc = values?.get(4)?.replace(\",\", \"\")?.trim()?.let {\n            if (it matches Regex(\"([-+.~]|[/x](\\\\d))+\")) {\n                val lnWTDivDD = wholeTick / defaultDuration.toDouble()\n                val intAbove = lnWTDivDD.toInt()\n                // fix\n                when (it) {\n                    \".\" -> (intAbove * 1.5).toInt()\n                    \"..\" -> (intAbove * 1.5 * 1.5).toInt()\n                    \"...\" -> (intAbove * 1.5 * 1.5 * 1.5).toInt()\n                    \"/3\" -> intAbove / 3\n                    \"/6\" -> intAbove / 6\n                    \"/9\" -> intAbove / 9\n                    else -> it.replace(\"~\", \"\")\n                            .durationSymbolsToMultiple(ln(lnWTDivDD))\n                            .toInt()\n                }\n            } else it.toIntOrNull()\n        } ?: run {\n            if (operation != null) {\n                if (operation == \"on\") 0 else wholeTick / defaultDuration\n            } else throw Exception(\"operation name is expected.\")\n        }\n        val velocity = values?.get(6)?.replace(\",\", \"\")?.trim()?.toIntOrNull() ?: defaultVelocity\n        val channel = values?.get(7)?.replace(\",\", \"\")?.trim()?.toIntOrNull() ?: 0\n        if (channel !in 0..0xf) throw Exception(\"channel is expected in the range of 0~16, given: $channel\")\n        val code = name?.let {\n            noteBaseOffset(it.last().uppercase()) + (octave + 1) * 12\n        } ?: throw Exception(\"note name are expected.\")\n\n        byteArrayOf(\n            *(previousTicks + timeDesc).asvlByteArray(),\n            ((operation ?: throw Exception(\"match operation code failed.\")).let { if (it == \"on\") 0x90 else 0x80 } or channel).toByte(),\n            code.toByte(),\n            velocity.toByte()\n        )\n    }\n\n    this matches instrumentRegex -> {\n\n        val values = instrumentRegex.find(this)?.groupValues\n        val channel = values?.get(1)?.toIntOrNull(16) ?: 0\n        val instrument = values?.get(2)?.toIntOrNull() ?: run {\n            values?.get(2)?.let { MidiInstrument.valueOf(it).id }\n        } ?: throw Exception(\"instrument must be provided.\")\n        val time = values?.get(3)?.replace(\",\", \"\")?.trim()?.toIntOrNull() ?: 0\n\n        byteArrayOf(\n            *(previousTicks + time).asvlByteArray(),\n            (0xc0 or channel).toByte(),\n            instrument.toByte()\n        )\n    }\n\n    this matches controllerRegex -> {\n        val data = replace(Regex(\"\\\\s*c.*\\\\s*=\\\\s*\"), \"\").split(\",\").map { it.trim().toInt() }\n        val number = data[0]\n        val parameter = data[1]\n        val values = controllerRegex.find(this)?.groupValues\n        val channel = values?.get(1)?.toIntOrNull(16) ?: 0\n        val time = values?.get(2)?.replace(\",\", \"\")?.trim()?.toIntOrNull() ?: 0\n        byteArrayOf(\n            *(previousTicks + time).asvlByteArray(),\n            (0xb0 or channel).toByte(),\n            number.toByte(),\n            parameter.toByte()\n        )\n    }\n\n    this matches titleRegex -> asMetaEventData(\"title \", 3, previousTicks)\n\n    this matches programNameRegex -> asMetaEventData(\"instrumentName \", 4, previousTicks)\n\n    this matches lyricRegex -> asMetaEventData(\"lyric \", 5, previousTicks)\n\n    else -> throw Exception(\"this operation has not yet implement: $this\")\n}\n\nprivate fun String.asMetaEventData(prefix: String, type: Int, previousTicks: Int = 0) = removePrefix(prefix).toByteArray().let {\n    byteArrayOf(\n        *previousTicks.asvlByteArray(), 0xff.toByte(), type.toByte(),\n        *it.size.asvlByteArray(),\n        *it\n    )\n}\n\n\n\n","package org.mider.impl\n\nfun String.toByteArray(): ByteArray = encodeToByteArray()\n\nfun ByteArray.clone(): ByteArray = byteArrayOf(*this)","package org.mider\n\nimport org.mider.expect.ByteBuffer\n\n/*\nchannel\t0..15\t0\nframe_type\t0..7\t0\nframe_value\t0..15\t0\ncontrol\t0..127\t0\nnote\t0..127\t0\nprogram\t0..127\t0\nsong\t0..127\t0\nvalue\t0..127\t0\nvelocity\t0..127\t64\ndata\t(0..127, 0..127, …)\t() (empty tuple)\npitch\t-8192..8191\t0\npos\t0..16383\t0\ntime\tany integer or float\n*/\n\n//    val pos: Int = 0,\n\n\n//    val data: Int,\n//    val type: MessageType,\n//    val channel: Int = 0,\n//    val frame_type: Int = 0,\n//    val frame_value: Int = 0,\n//    val control: Int = 0,\n//    val note: Note = Note.`C-1`,\n//    val program: Int = 0,\n//    val song: Int = 0,\n//    val value: Int = 0,\n//    val velocity: Int = 64,\n//    val pitch: Int = 0,\n\ninterface IMessage: HasByteSize, HexData {\n    val deltaTimeArray: ByteArray\n//    fun passDataToChannel(channel: WritableByteChannel, buffer: ByteBuffer)\n    fun writeMessageContent(buffer: ByteBuffer)\n}\n\nclass HexMessage(private val data: ByteArray) : IMessage {\n\n    override val deltaTimeArray: ByteArray get() {\n        throw Exception(\"deltaTimeArray is part of data in HexMessage\")\n    }\n\n    override fun writeMessageContent(buffer: ByteBuffer) {\n        buffer.put(data)\n    }\n\n//    override fun passDataToChannel(channel: WritableByteChannel, buffer: ByteBuffer) {\n//        channel.write(buffer.apply {\n//            clear()\n//            put(data)\n//            flip()\n//        })\n//    }\n\n    override fun getOccupiedBytes(): Int = data.size\n\n    @Deprecated(\"use passDataToFileChannel\")\n    override fun getHexDataAsByteBuffer(): ByteBuffer {\n        throw Exception(\"use passDataToFileChannel\")\n    }\n\n}\n\nclass Message(val event: Event, val time: Int = 0) : IMessage {\n    constructor(eventType: EventType, note: MidiNote, time: Int = 0, velocity: Byte = 100, channel: Byte = 0)\n            : this(Event(eventType, byteArrayOf(note.id, velocity), channel), time)\n    constructor(eventType: EventType, time: Int = 0, vararg data: Byte, channel: Byte = 0)\n            : this(Event(eventType, data, channel), time)\n    constructor(eventType: EventType, note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0)\n            : this(Event(eventType, byteArrayOf(note, velocity), channel), time)\n    constructor(eventType: EventType, data: ByteArray, time: Int = 0, channel: Byte = 0)\n            : this(Event(eventType, data, channel), time)\n    constructor(eventType: EventType, time: Int = 0, vararg data: Byte)\n            : this(Event(eventType, args = data, 0), time)\n    constructor(eventType: EventType, vararg data: Byte)\n            : this(Event(eventType, args = data, 0), 0)\n\n    override val deltaTimeArray: ByteArray get() = time.asvlByteArray()\n\n    override fun writeMessageContent(buffer: ByteBuffer) {\n        buffer.put(deltaTimeArray)\n        buffer.put(event.generateData())\n    }\n\n    override fun getOccupiedBytes() = event.getOccupiedBytes() + deltaTimeArray.size\n\n    @Deprecated(\"use writeMessageContent\")\n    override fun getHexDataAsByteBuffer(): ByteBuffer {\n        val occupied = getOccupiedBytes()\n        val buffer = ByteBuffer.allocate(occupied)\n        with(buffer) {\n            put(deltaTimeArray)\n            put(event.getHexDataAsByteBuffer())\n            flip()\n        }\n        return buffer\n    }\n\n    override fun toString(): String {\n        return \"[event: $event time: $time]\"\n    }\n}\n\nclass MetaMessage(val metaEvent: MetaEvent, var time: Int = 0, val status: Byte = 0xff.toByte()) : IMessage, HexData {\n\n//    constructor(metaEventType: MetaEventType, args: ByteArray = HexConst.emptyData)\n//            : this(MetaEvent(metaEventType, args))\n    constructor(metaEventType: MetaEventType, vararg args: Byte = HexConst.emptyData)\n            : this(MetaEvent(metaEventType, args))\n\n    override val deltaTimeArray: ByteArray get() = time.asvlByteArray()\n\n    override fun writeMessageContent(buffer: ByteBuffer) {\n        buffer.apply {\n            put(deltaTimeArray)\n            put(status)\n            put(metaEvent.generateData())\n        }\n    }\n\n    @Deprecated(\"use writeMessageContent\")\n    override fun getHexDataAsByteBuffer(): ByteBuffer {\n        val occupied = getOccupiedBytes()\n        val buffer = ByteBuffer.allocate(occupied)\n        with(buffer) {\n            put(deltaTimeArray)\n            put(status)\n            put(metaEvent.getHexDataAsByteBuffer())\n            flip()\n        }\n        return buffer\n    }\n\n    override fun toString(): String {\n        return \"meta: [event: $metaEvent, status: $status, deltaTime: $time]\"\n    }\n\n    override fun getOccupiedBytes(): Int {\n        return 1 + metaEvent.getOccupiedBytes() + deltaTimeArray.size\n    }\n}","package org.mider\n\nobject HexConst {\n    val Mthd = byteArrayOf(77, 84, 104, 100)\n    val Mtrk = byteArrayOf(77, 84, 114, 107)\n    val emptyData = ByteArray(0)\n}\n\nenum class MidiFormat(id: Byte) {\n    MIDI_SINGLE (0), MIDI_MULTIPLE (1), MIDI_PATTERN (2)\n}\n","package org.mider\n\nimport org.mider.expect.ByteBuffer\n\ninterface HasByteSize {\n    fun getOccupiedBytes(): Int\n}\n\ninterface HexData {\n    @Deprecated(\"use passDataToFileChannel\")\n    fun getHexDataAsByteBuffer(): ByteBuffer\n}\n\nclass MidiFile(\n    private val format: MidiFormat = MidiFormat.MIDI_MULTIPLE,\n    private val trackdiv: Int = 960,\n    bufferSize: Int = 100 * 1024,\n    debugOutput: Boolean = false\n) {\n    private val trackChain = mutableListOf<Track>()\n    private val buffer = ByteBuffer.allocate(bufferSize)\n    private var debug = false\n\n    fun append(track: Track): MidiFile = apply { trackChain.add(track) }\n\n    inline fun append(block: MidiFile.() -> Unit): MidiFile = apply(block)\n\n    fun track(block: Track.() -> Unit): Track = Track().apply {\n        this.append(block)\n        append(this)\n    }\n\n    fun doFinal(): ByteBuffer {\n        val seclen = 6\n        val capacity = 4 + 4 + seclen\n\n        buffer.apply {\n            clear()\n            put(HexConst.Mthd)\n            put(seclen.as4lByteArray())\n            put(format.ordinal.as2lByteArray())\n            put(trackChain.size.as2lByteArray())\n            put(trackdiv.as2lByteArray())\n        }\n\n        trackChain.forEach {\n            it.writeHead(buffer)\n            it.writeMessage(buffer)\n        }\n\n        buffer.flip()\n\n        return buffer\n    }\n\n    fun getFileSize(): Int {\n        return trackChain.sumOf { it.headOccupied + it.messageOccupied } + 6 + 4 + 4\n    }\n}","package org.mider\n\nenum class MidiInstrument (val id: Int) {\n    piano(0), eletricGrandPiano(3),  musicbox(11), marimba(13), accordion(22),\n    harmonica(23), nylongitar(25), acousicbass(33),\n    violin(41), viola(42), cello(43), trumpet(57),\n    trombone(58), tuba(59), sopranosax(65), altosax(66),\n    tenorsax(67), barisax(68), oboe(69), piccolo(73),\n    flute(74), recorder(75), whistle(79), kalimba(109),\n    koto(108), fiddle(111), tinklebell(113)\n}","package org.mider\n\nimport org.mider.expect.ByteBuffer\nimport kotlin.jvm.JvmName\n\n//import java.nio.ByteBuffer\n//import java.nio.channels.WritableByteChannel\n\nclass Track {\n    val msgchain = mutableListOf<IMessage>()\n\n    val seclen: ByteArray get() = msgchain.sumOf { it.getOccupiedBytes() }.as4lByteArray()\n\n    fun append(msg: IMessage): Track {\n        // todo debug\n//        println(msg)\n        msgchain.add(msg)\n        return this\n    }\n\n    fun insertPenultimate(msg: IMessage) {\n//        println(msg)\n        msgchain.add(msgchain.lastIndex, msg)\n    }\n\n    inline fun append(block: Track.() -> Unit): Track {\n        with(this, block)\n        return this\n    }\n\n    fun meta(metaEvent: MetaEvent, time: Int = 0, status: Byte = 0xff.toByte()) {\n        append(MetaMessage(metaEvent, time, status))\n    }\n\n//    fun meta(metaEventType: MetaEventType, args: ByteArray = HexConst.emptyData) {\n//        append(MetaMessage(metaEventType, args))\n//    }\n\n    fun meta(metaEventType: MetaEventType, vararg args: Byte = HexConst.emptyData) {\n        append(MetaMessage(metaEventType, args = args))\n    }\n\n    fun end() {\n        meta(MetaEventType.META_END_OF_TRACK)\n    }\n\n    fun tempo(bpm: Int) {\n        meta(MetaEventType.META_TEMPO, *bpm(bpm))\n    }\n\n//    fun message(eventType: EventType, vararg data: Byte) {\n//        append(Message(eventType, data = data))\n//    }\n//\n//    fun message(eventType: EventType, time: Int, vararg data: Byte) {\n//        append(Message(eventType, time, data = data))\n//    }\n//\n//    fun message(eventType: EventType, time: Int = 0, vararg data: Byte, channel: Byte = 0) {\n//        append(Message(eventType, time, data = data, channel))\n//    }\n\n//    fun message(eventType: EventType, note: Note, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n//        append(Message(eventType, note, time, velocity, channel))\n//    }\n\n//    fun message(eventType: EventType, note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n//        append(Message(eventType, note, time, velocity, channel))\n//    }\n\n//    fun message(eventType: EventType, data: ByteArray, time: Int = 0, channel: Byte = 0) {\n//        append(Message(eventType, data, time, channel))\n//    }\n\n    fun message(event: Event, time: Int = 0) {\n        append(Message(event, time))\n    }\n\n    fun message(msg: IMessage) {\n        append(msg)\n    }\n\n    fun messagePenultimate(event: Event, time: Int = 0) {\n        insertPenultimate(Message(event, time))\n    }\n\n    fun message(event: EventType, time: Int = 0, channel: Byte = 0, vararg data: Byte) {\n        message(Event(event, args = data, channel), time)\n    }\n\n    fun messaged(eventType: EventType, vararg data: Byte) {\n        message(Event(eventType, args = data, 0), 0)\n    }\n\n    fun changeProgram(program: Byte) {\n        message(Event(EventType.program_change, byteArrayOf(program), 0), 0)\n    }\n\n    fun noteOn(note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        message(Event(EventType.note_on, byteArrayOf(note, velocity), channel), time)\n    }\n\n    fun noteOff(note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        message(Event(EventType.note_off, byteArrayOf(note, velocity), channel), time)\n    }\n\n    fun noteOn(note: MidiNote, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        noteOn(note.id, time, velocity, channel)\n    }\n\n    fun noteOff(note: MidiNote, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        noteOff(note.id, time, velocity, channel)\n    }\n\n    fun note(note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        noteOn(note, time, velocity, channel)\n    }\n\n    fun note(note: MidiNote, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        note(note.id, time, velocity, channel)\n    }\n\n    fun noteOnPenultimate(note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        messagePenultimate(Event(EventType.note_on, byteArrayOf(note, velocity), channel), time)\n    }\n\n    fun noteOffPenultimate(note: Byte, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        messagePenultimate(Event(EventType.note_off, byteArrayOf(note, velocity), channel), time)\n    }\n\n    fun noteOnPenultimate(note: MidiNote, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        noteOnPenultimate(note.id, time, velocity, channel)\n    }\n\n    fun noteOffPenultimate(note: MidiNote, time: Int = 0, velocity: Byte = 100, channel: Byte = 0) {\n        noteOffPenultimate(note.id, time, velocity, channel)\n    }\n\n    @JvmName(\"hexArray\")\n    fun hex(bytes: ByteArray) {\n        message(HexMessage(bytes))\n    }\n\n    @JvmName(\"hexVarargByte\")\n    fun hex(vararg bytes: Byte) = hex(bytes)\n\n    fun hex(hex: String, delimiter: String = \" \") {\n        hex(hex.let { hex ->\n            if (delimiter == \"\") {\n                val list = mutableListOf<String>()\n                hex.forEachIndexed { index, c ->\n                    if (index % 2 == 1) list += hex[index - 1] + c.toString()\n                }\n                list\n            } else hex.trim().split(delimiter)\n        }.map {\n            it.toInt(16).toByte()\n        }.toByteArray())\n    }\n\n//\n//    fun message(\n//        eventType: EventType,\n//        note: Note = Note.C4,\n//        time: Int = 0,\n//        channel: Byte = 0,\n//        velocity: Byte = 100,\n//    ) {\n//        message(eventType, note.id, time, channel, velocity)\n//    }\n//\n//    fun message(\n//        eventType: EventType,\n//        note: Byte = 0,\n//        time: Int = 0,\n//        channel: Byte = 0,\n//        velocity: Byte = 100,\n//        instrument: Byte = 0\n//    ) {\n//        when (eventType) {\n//            EventType.note_on, EventType.note_off -> {\n//                message(Event(eventType, byteArrayOf(note, velocity), channel), time)\n//            }\n//\n//            EventType.program_change -> {\n//                message(Event(eventType, byteArrayOf(instrument), channel), time)\n//            }\n//        }\n//    }\n\n    val headOccupied: Int = 8\n\n    fun writeHead(buffer: ByteBuffer) {\n        buffer.apply {\n            // clear()\n            put(HexConst.Mtrk)\n            put(seclen)\n            // flip()\n        }\n    }\n\n    val messageOccupied: Int get() = msgchain.sumOf { it.getOccupiedBytes() }\n\n    fun writeMessage(buffer: ByteBuffer) {\n        msgchain.forEach {\n            it.writeMessageContent(buffer)\n//            it.passDataToChannel(channels, buffer)\n        }\n    }\n}\n","package org.mider.code\n\nimport org.mider.*\nimport org.mider.descr.*\n\n//import java.lang.StringBuilder\n//import java.util.*\n//import java.io.File\n//import java.net.URL\nimport org.mider.impl.Stack\nimport org.mider.lyric.multiLyricResolve\n\nfun macro(seq: String, config: MacroConfiguration = MacroConfiguration()): String {\n    if ('(' !in seq || ')' !in seq) return seq\n//    val innerScope = mutableMapOf<String, String>()\n    val outerScope = config.outerScope\n    val macroScope = config.macroScope\n//    val replacePattern = Regex(\"replace\\\\s*:\\\\s*[^>]+\")\n//    val replaceWith = mutableListOf<MutableList<String>>()\n\n    val innerScopeExecute = { str: String ->\n        if (MacroConfiguration.getVariableValuePattern.matches(str)) {\n            val symbol = MacroConfiguration.getVariableValuePattern.matchEntire(str)!!.groupValues[1]\n            if (symbol !in outerScope) {\n                // todo 解决 innerScopeExecute 先于 innerScopeExecute 执行的问题\n                config.logger.error(Exception(\"undefined symbol: $symbol\"))\n                str\n            } else outerScope[symbol]!!\n        } else {\n            config.logger.error(Exception(\"unsupported operation in inner: $str\"))\n            str\n        }\n    }\n\n    val outerScopeExecute = { str: String ->\n        if (MacroConfiguration.definePattern.matches(str)) {\n            val symbol = MacroConfiguration.definePattern.matchEntire(str)!!.groupValues[1]\n            outerScope[symbol] = str.replace(Regex(\"def\\\\s+$symbol\\\\s*=\"), \"\")\n            \"\"\n        } else if (MacroConfiguration.executePattern.matches(str)) {\n            val symbol = MacroConfiguration.executePattern.matchEntire(str)!!.groupValues[1]\n            outerScope[symbol] = str.replace(Regex(\"def\\\\s+$symbol\\\\s*:\"), \"\")\n            outerScope[symbol]\n        } else if (MacroConfiguration.getVariableValuePattern.matches(str)) {\n            val symbol = MacroConfiguration.getVariableValuePattern.matchEntire(str)!!.groupValues[1]\n            if (symbol !in outerScope) {\n                config.logger.error(Exception(\"undefined symbol: $symbol\"))\n                str\n            } else outerScope[symbol]\n        } else if (MacroConfiguration.macroDefinePattern.matches(str)) {\n            val spl = str.split(\":\")\n            val name = Regex(\"macro\\\\s+[a-zA-Z_]\\\\w*\").find(str)!!.value.replace(Regex(\"macro\\\\s+|\\\\s*\"), \"\")\n            val params = spl[0].replace(Regex(\"macro\\\\s+[a-zA-Z_]\\\\w*|\\\\s*\"), \"\").split(\",\")\n            val body = spl.subList(1, spl.size).joinToString(\"\")\n            macroScope[name] = params to body\n            \"\"\n        } else if (MacroConfiguration.macroUsePattern.matches(str)) {\n            val name = MacroConfiguration.macroUsePattern.matchEntire(str)!!.groupValues[1]\n            val arguments = str.replace(Regex(\"!$name\\\\s+\"), \"\").split(\",\").toMutableList()\n            if (macroScope.contains(name)) {\n                val params = macroScope[name]!!.first\n                var body = macroScope[name]!!.second\n                params.forEach {\n                    body = body.replace(\"@[$it]\", if (arguments.isEmpty()) {\n                        config.logger.error(Exception(\"missing param: $it\"))\n                        \"\"\n                    } else arguments.removeFirst())\n                }\n                body\n            } else {\n                config.logger.error(Exception(\"undefined macro: $name\"))\n                str\n            }\n        } else if (MacroConfiguration.ifDefinePattern.matches(str)) {\n            val name = MacroConfiguration.ifDefinePattern.matchEntire(str)!!.groupValues[1]\n            val body = str.replace(Regex(\"ifdef\\\\s+$name\\\\s+\"), \"\")\n            if (outerScope.contains(name)) body else \"\"\n        } else if (MacroConfiguration.ifNotDefinePattern.matches(str)) {\n            val name = MacroConfiguration.ifNotDefinePattern.matchEntire(str)!!.groupValues[1]\n            val body = str.replace(Regex(\"if!def\\\\s+$name\\\\s+\"), \"\")\n            if (!outerScope.contains(name)) body else \"\"\n        } else if (MacroConfiguration.repeatPattern.matches(str)) {\n            val times = MacroConfiguration.repeatPattern.matchEntire(str)!!.groupValues[1].toInt()\n            val body = str.replace(Regex(\"repeat\\\\s+\\\\d+\\\\s*:\"), \"\")\n            val result = StringBuilder()\n            for (i in 0..<times) {\n                result.append(body)\n            }\n            result\n        } else if (MacroConfiguration.includePattern.matches(str)) {\n            if (config.recursionCount > config.recursionLimit) throw Exception(\"stack overflow, the limit is ${config.recursionLimit} while launching this macro\")\n            config.recursionCount ++\n            macro(config.fetch(str.replace(Regex(\"include\\\\s+\"), \"\")), config)\n        } else if (MacroConfiguration.commentPattern.matches(str)) {\n            \"\"\n        } else if (MacroConfiguration.velocityPattern.matches(str)) {\n            // 音名序列可用, 和弦使用会出bug\n\n            val funcName = MacroConfiguration.velocityPattern.matchEntire(str)!!.groupValues[1].trim()\n            val range = MacroConfiguration.velocityPattern.matchEntire(str)!!.groupValues[2].replace(Regex(\"\\\\s\"), \"\").split(\"~\")\n            val body = str.replace(Regex(\"velocity\\\\s+(linear\\\\s|func\\\\s)(\\\\d{1,3}\\\\s*~\\\\s*\\\\d{1,3})\\\\s*:\"), \"\")\n\n            if (range[0] == \"100\" && range[1] == \"100\") body else {\n                when (funcName) {\n                    \"linear\" -> {\n                        val result = Regex(\"([abcdefgABCDEFG~^vmwnui!pqsz])\").findAll(body).toList()\n                        val ret = StringBuilder()\n                        val from = range[0].toInt()\n                        val to = range[1].toInt()\n                        if (result.isEmpty()) throw Exception(\"body has to contain notes\")\n                        val step = (to - from).toDouble() / result.size\n                        var count = .0\n\n                        body.forEach {\n                            if (it in \"abcdefgABCDEFG~^vmwnui!pqsz\") {\n                                ret.append(\"$it%${(from + count).toInt()}\")\n                                count += step\n                            } else ret.append(it)\n                        }\n                        ret.toString()\n                    }\n                    else -> config.logger.error(Exception(\"unsupported function in velocity: $funcName\"))\n                }\n            }\n        } else {\n            config.logger.error(Exception(\"unsupported operation in outer: $str\"))\n            str\n        }\n    }\n\n    val stack = Stack<Char>()\n\n    val buildStack = Stack<CharSequence>()\n    seq.replace(\"?\", \"\").forEach {\n        if (it != ')') stack.push(it) else {\n            val sb = StringBuilder()\n            var stackChar: Char\n\n            do {\n                stackChar = stack.pop()\n                sb.append(stackChar)\n            } while (stackChar != '(')\n\n            stack.push('?')\n\n            buildStack.push(sb.toString().replaceFirst(\"(\", \"\"))\n        }\n    }\n\n    val innerBuildStack = Stack<CharSequence>()\n\n    while (buildStack.isNotEmpty()) {\n        val undetermined = buildStack.pop()\n        val buildStackString = if (undetermined.contains('?')) {\n            var tmp = undetermined\n            for (i in 0..< tmp.charCount('?')) {\n                // todo 调整执行顺序\n                val result = innerScopeExecute(buildStack.pop().toString().reversed())\n                tmp = tmp.replaceFirst(Regex(\"\\\\?\"), result.reversed())\n            }\n            tmp.reversed()\n        } else undetermined.reversed()\n        innerBuildStack.push(buildStackString)\n    }\n\n    val result = StringBuilder()\n\n    stack.forEach {\n        if (it == '?') {\n            result.append(outerScopeExecute(innerBuildStack.pop().toString()))\n        } else result.append(it)\n    }\n\n    return result.toString()\n}\n\nclass ActionStack <P, R> : Stack<(P) -> R>() {\n    operator fun plusAssign(block: (P) -> R) {\n        push(block)\n    }\n\n    operator fun invoke(p: P): MutableList<R> {\n        val resultSet = mutableListOf<R>()\n        while (isNotEmpty()) resultSet += pop()(p)\n        return resultSet\n    }\n}\n\nfun toInMusicScoreList(seq: String, iPitch: Int = 4, iVelocity: Int = 100, iOnVelocity: Int = iVelocity, iOffVelocity: Int = iVelocity, iDurationDefault: Double = .25, iIsStave: Boolean = true, iDefaultChannel: Int? = null, iDefaultGap: RelativeTicks? = null, iUseMandarinOnomatopoeia: Boolean = true, useMacro: Boolean = true, config: MacroConfiguration = MacroConfiguration()): List<InMusicScore> {\n\n    var pitch = iPitch\n    var velocity = iVelocity\n    var onVelocity = iOnVelocity\n    var offVelocity = iOffVelocity\n    var durationDefault = iDurationDefault\n    var isStave = iIsStave\n    var useMandarinOnomatopoeia = iUseMandarinOnomatopoeia\n    var defaultChannel = iDefaultChannel\n    var defaultGap = iDefaultGap\n\n    val list = mutableListOf<InMusicScore>()\n    val doAfter = ActionStack<Char, Unit>() //mutableListOf<(Char)->Unit>()\n    var skipper = 0 // 跳过多少个字符 0 表示不跳过\n\n    val afterMacro = if (useMacro) macro(seq, config) else seq\n\n    fun checkSuffixModifyAvailable() {\n        if (list.isEmpty()) throw Exception(\"before modify or clone the note, you should insert at least one\\ninput: $afterMacro\\nisStave: $isStave\")\n    }\n\n    fun cloneAndModify(times: Int = 1, isUpper: Boolean = true) {\n        checkSuffixModifyAvailable()\n        if (list.last() is Note) {\n            if (isUpper)\n                list += list.last().clone().cast<Note>().upperNoteName(times)\n            else\n                list += list.last().clone().cast<Note>().lowerNoteName(times)\n        }\n    }\n\n    fun cloneAndModifyInChord(chord: Chord, times: Int = 1, isUpper: Boolean = true) {\n        if (isUpper)\n            chord += chord.last().clone().upperNoteName(times)\n        else\n            chord += chord.last().clone().lowerNoteName(times)\n    }\n\n    afterMacro.forEachIndexed { index, char ->\n\n        if (skipper == 0) {\n            when (char) {\n                in 'a'..'g' -> {\n                    if (isStave) {\n                        list += Note(char, pitch, DurationDescribe(default = durationDefault), velocity).apply {\n                            if (onVelocity != velocity)\n                                noteOnVelocity = onVelocity\n\n                            if (offVelocity != velocity)\n                                noteOffVelocity = offVelocity\n\n\n                            defaultChannel?.let { attach = NoteAttach(channel = it) } ?: attach?.clearChannel()\n//                                attach?.let { it.channel = null }\n\n                            defaultGap?.let { attach = NoteAttach(gap = it) } ?: attach?.clearGap()\n                        }\n                    } else if (char == 'b') {\n                        doAfter += {\n                            (list.last() as? Note)?.flap()\n                        }\n                    }\n                }\n\n                in 'A'..'G' -> {\n                    if (isStave) {\n                        list += Note(char, pitch + 1, DurationDescribe(default = durationDefault), velocity).apply {\n                            if (onVelocity != velocity)\n                                noteOnVelocity = onVelocity\n\n                            if (offVelocity != velocity)\n                                noteOffVelocity = offVelocity\n\n                            defaultChannel?.let { attach = NoteAttach(channel = it) } ?: attach?.clearChannel()\n\n                            defaultGap?.let { attach = NoteAttach(gap = it) } ?: attach?.clearGap()\n                        }\n                    }\n                }\n\n                in \"多哆瑞来米咪发唆嗦索拉啦稀西希\" -> {\n                    if (useMandarinOnomatopoeia) {\n                        list += Note(when (char) {\n                            '哆', '多' -> 'C'\n                            '来', '瑞' -> 'D'\n                            '咪', '米' -> 'E'\n                            '发' -> 'F'\n                            '唆', '嗦', '索' -> 'G'\n                            '拉', '啦' -> 'A'\n                            '稀', '西', '希' -> 'B'\n                            else -> throw Exception(\"unsupported mandarin onomatopoeia: $char\")\n                        }, pitch, DurationDescribe(default = durationDefault), velocity).apply {\n                            if (onVelocity != velocity)\n                                noteOnVelocity = onVelocity\n\n                            if (offVelocity != velocity)\n                                noteOffVelocity = offVelocity\n\n                            defaultChannel?.let { attach = NoteAttach(channel = it) } ?: attach?.clearChannel()\n\n                            defaultGap?.let { attach = NoteAttach(gap = it) } ?: attach?.clearGap()\n                        }\n                    }\n\n                // 加入中文拟声词支持确实不太符合规范\n                // 但是 midercode 的目标是做到简单易用方便读写\n                // 支不支持中文拟声词可有可无, 也不占用符号\n                // 如果加入这一支持能使得第一次接触的人在输入方法和符号系统的障碍稍微小一点\n                // 那么也算是对这套体系有所贡献吧\n                }\n\n                in '0'..'9' -> {\n                    if (isStave) {\n                        checkSuffixModifyAvailable()\n                        if (list.last() is CanModifyTargetPitch)\n                            list.last().cast<CanModifyTargetPitch>().modifyTargetPitch(char.code - 48)\n                    } else if (char in '1'..'7') {\n                        val note = Note('C', pitch, DurationDescribe(default = durationDefault), velocity).apply {\n                            if (onVelocity != velocity)\n                                noteOnVelocity = onVelocity\n\n                            if (offVelocity != velocity)\n                                noteOffVelocity = offVelocity\n\n                            defaultChannel?.let { attach = NoteAttach(channel = it) } ?: attach?.clearChannel()\n//                                attach?.let { it.channel = null }\n\n                            defaultGap?.let { attach = NoteAttach(gap = it) } ?: attach?.clearGap()\n                        }\n                        note.up(deriveInterval(char.code - 49))\n                        list += note\n                    } else if (char == '0') {\n                        doAfter.clear()\n                        list += Rest(DurationDescribe(default = durationDefault))\n                    }\n                }\n\n                'O' -> {\n                    doAfter.clear()\n                    list += Rest(DurationDescribe(default = durationDefault)).let { it.duration.double; it }\n                }\n\n                'o' -> {\n                    doAfter.clear()\n                    list += Rest(DurationDescribe(default = durationDefault))\n                }\n\n                't' -> {\n                    checkSuffixModifyAvailable()\n                    when (list.last()) {\n                        is Appoggiatura -> {\n                            list.last().cast<Appoggiatura>().isFront = false\n                        }\n\n                        is Glissando -> {\n                            list.last().cast<Glissando>().isContainBlack = true\n                        }\n\n                        is Chord -> {\n                            list.last().cast<Chord>().isIndependentDuration = true\n                        }\n                    }\n                }\n\n                '~' -> {\n                    checkSuffixModifyAvailable()\n                    list += list.last().clone()\n                }\n\n                '^' -> cloneAndModify(1)\n                'm' -> cloneAndModify(2)\n                'n' -> cloneAndModify(3)\n                'p' -> cloneAndModify(5)\n                's' -> cloneAndModify(6)\n\n                'v' -> cloneAndModify(1, false)\n                'w' -> cloneAndModify(2, false)\n                'u' -> cloneAndModify(3, false)\n                'q' -> cloneAndModify(5, false)\n                'z' -> cloneAndModify(6, false)\n\n                'i' -> {\n                    if (isStave) {\n                        cloneAndModify(4)\n                    } else {\n                        checkSuffixModifyAvailable()\n                        if (list.last() is HasOctave) list.last().cast<HasOctave>().higherOctave()\n                    }\n                }\n\n                '︴', '↟' -> {\n                    checkSuffixModifyAvailable()\n                    if (list.last() is Chord)\n                        list.last().cast<Chord>().arpeggio = ArpeggioType.Ascending\n                }\n\n                '↡' -> {\n                    checkSuffixModifyAvailable()\n                    if (list.last() is Chord)\n                        list.last().cast<Chord>().arpeggio = ArpeggioType.Downward\n                }\n\n                '↑', '∧', '高', 'N' -> {\n                    checkSuffixModifyAvailable()\n                    if (list.last() is HasOctave) list.last().cast<HasOctave>().higherOctave()\n                }\n\n                '!' -> {\n                    if (isStave) {\n                        cloneAndModify(4, false)\n                    } else {\n                        checkSuffixModifyAvailable()\n                        if (list.last() is HasOctave) list.last().cast<HasOctave>().lowerOctave()\n                    }\n                }\n\n                '↓', '∨', '低', 'V' -> {\n                    checkSuffixModifyAvailable()\n                    if (list.last() is HasOctave) list.last().cast<HasOctave>().lowerOctave()\n                }\n\n                '#', '♯', '升' -> {\n                    doAfter += {\n                        (list.last() as? HasFlatAndSharp)?.sharp()\n                    }\n                }\n\n                '@', '♮' -> {\n                    doAfter += {\n                        if (list.last() is Note)\n                            list.last().cast<Note>().isNature = true\n                    }\n                }\n\n                '$', '♭', '降' -> {\n                    doAfter += {\n                        if (list.last() is Note)\n                            list.last().cast<Note>().flap()\n                    }\n                }\n\n                '\\'' -> {\n                    checkSuffixModifyAvailable()\n                    if (list.last() is HasFlatAndSharp) list.last().cast<HasFlatAndSharp>().flap()\n                }\n\n                '\"' -> {\n                    checkSuffixModifyAvailable()\n                    if (list.last() is HasFlatAndSharp) list.last().cast<HasFlatAndSharp>().sharp()\n                }\n\n                '&' -> {\n                    if (list.isEmpty()) throw Exception(\"`&` requires at least 2 notes to combine.\")\n\n                    val tie: TieNote = if (list.last() is Note) {\n                        val t = TieNote(list.removeLast().cast())\n                        list += t\n                        t\n                    } else if (list.last() is TieNote) {\n                        list.last().cast()\n                    } else throw Exception(\"build tie failed: unsupported type: ${list.last()}\")\n\n                    doAfter += {\n                        when (val beAdded = list.removeLast()) {\n                            is Note -> tie += beAdded\n                            else -> tie += Note(\"C\", duration = beAdded.duration)\n                        }\n                    }\n                }\n\n                ':' -> {\n                    if (list.isEmpty()) throw Exception(\"the root is necessary for creating a chord.\")\n\n                    val chord: Chord = if (list.last() is Note) {\n                        val c = Chord(list.removeLast().cast())\n                        list += c\n                        c\n                    } else if (list.last() is Chord) {\n                        list.last().cast()\n                    } else throw Exception(\"build chord failed: unsupported type: ${list.last()}\")\n\n                    doAfter += {\n                        when(it) {\n                            '^' -> cloneAndModifyInChord(chord, 1)\n                            'm' -> cloneAndModifyInChord(chord, 2)\n                            'n' -> cloneAndModifyInChord(chord, 3)\n                            'p' -> cloneAndModifyInChord(chord, 4)\n                            'i' -> {\n                                if (isStave)\n                                    cloneAndModifyInChord(chord, 5)\n                            }\n                            's' -> cloneAndModifyInChord(chord, 6)\n\n                            'v' -> cloneAndModifyInChord(chord, 1, false)\n                            'w' -> cloneAndModifyInChord(chord, 2, false)\n                            'u' -> cloneAndModifyInChord(chord, 3, false)\n                            'q' -> cloneAndModifyInChord(chord, 4, false)\n                            '!' -> {\n                                if (isStave)\n                                    cloneAndModifyInChord(chord, 5, false)\n                            }\n                            'z' -> cloneAndModifyInChord(chord, 6, false)\n\n                            else -> {\n                                chord += list.removeLast().cast()\n                            }\n                        }\n                    }\n                }\n\n                '*' -> {\n                    checkSuffixModifyAvailable()\n                    val times = afterMacro.nextOnlyInt(index, 5)\n                    skipper = when (times) {\n                        in 0..9 -> 1\n                        in 10..99 -> 2\n                        in 100..999 -> 3\n                        in 1000..9999 -> 4\n                        10000 -> 5\n                        else -> throw Exception(\"only allow repeat 10000 times\")\n                    }\n\n                    for (i in 0 until times - 1) {\n                        list += list.last().clone()\n                    }\n                }\n\n                '%' -> {\n                    checkSuffixModifyAvailable()\n\n                    val onOrOffOrNone = if (index + 1 in afterMacro.indices) {\n                        afterMacro[index + 1]\n                    } else throw Exception(\"% must be followed by [↑↓]?\\\\d{1,3}, not end of string\")\n\n                    val indexOffset = when (onOrOffOrNone) {\n                        '↑', '↓' -> 1\n                        in '0'..'9' -> 0\n                        else -> throw Exception(\"% must be followed by [↑↓]?\\\\d{1,3}\")\n                    }\n\n                    val givenVelocity = afterMacro.nextOnlyInt(index + indexOffset, 3)\n                    skipper = when (givenVelocity) {\n                        in 0..9 -> 1\n                        in 10..99 -> 2\n                        in 100..127 -> 3\n                        else -> throw Exception(\"given: $givenVelocity, but velocity should in 0 ~ 127\")\n                    } + indexOffset\n\n                    if (list.last() is CanModifyTargetVelocity)\n                        when (onOrOffOrNone) {\n                            '↑' -> list.last().cast<CanModifyTargetVelocity>().modifyTargetOffVelocity(givenVelocity)\n\n                            '↓' -> list.last().cast<CanModifyTargetVelocity>().modifyTargetOnVelocity(givenVelocity)\n\n                            else -> list.last().cast<CanModifyTargetVelocity>().modifyTargetVelocity(givenVelocity)\n                        }\n                }\n\n                '[' -> {\n                    checkSuffixModifyAvailable()\n                    val lyric = afterMacro.nextGivenChar(index, ']', 1024)\n                    skipper = lyric.count()\n                    multiLyricResolve(lyric, list)\n                }\n\n                '{' -> {\n                    val inBraces = afterMacro.nextGivenChar(index, '}', 1024)\n                    skipper = inBraces.count()\n                    when {\n                        inBraces.startsWith(\"mark \") -> {\n                            val content = inBraces.removePrefix(\"mark \")\n                            content.split(\",\").forEach { item ->\n                                val kv = item.split(\"=\").map { it.trim() }\n                                if (kv.size != 2) throw Exception(\"mark setup items group are expected like key=value concatenated with commas\")\n                                when (kv[0]) {\n                                    \"octave\", \"o\" -> pitch = kv[1].toInt()\n                                    \"onVel\", \"onVelocity\", \"on\" -> onVelocity = kv[1].toInt()\n                                    \"offVel\", \"offVelocity\", \"off\" -> offVelocity = kv[1].toInt()\n                                    \"velocity\", \"vel\", \"v\" -> {\n                                        velocity = kv[1].toInt()\n                                        onVelocity = velocity\n                                        offVelocity = velocity\n                                    }\n                                    \"stave\", \"s\" -> isStave = kv[1].toBoolean()\n                                    \"mandarinOnomatopoeia\", \"moia\" -> useMandarinOnomatopoeia = kv[1].toBoolean()\n                                    \"channel\", \"c\" -> defaultChannel = kv[1].let {\n                                        if (it == \"default\" || it == \"null\") null else it.toInt()\n                                    }\n                                    \"baseDuration\", \"duration\", \"d\" -> durationDefault = kv[1].toDouble()\n                                    \"gap\" -> kv[1].let { v ->\n                                        v.toLongOrNull()?.let { defaultGap = RelativeTicks(it) } ?: run {\n                                            defaultGap = if (v == \"default\" || v == \"null\") null\n                                            else RelativeTicks(v.durationSymbolsToMultiple())\n                                        }\n                                    }\n\n\n                                    else -> println(\"unsupported mark setup.\") // todo replace with logger.warning\n                                }\n                            }\n                        }\n\n                        else -> list += InMusicScoreEvent(inBraces, pitch, velocity, miderDefaultDuration = durationDefault) // assume that inBrace is hex data\n                    }\n                }\n\n                ';' -> {\n                    if (list.isEmpty()) throw Exception(\"the main note is necessary for creating a appoggiatura\")\n\n                    if (list.last() !is Note) throw Exception(\"appoggiatura require a note\")\n\n                    val main = list.removeLast().cast<Note>()\n\n                    doAfter += {\n                        list += Appoggiatura(main, list.removeLast().cast())\n                    }\n                }\n\n                '=' -> {\n                    if (list.isEmpty()) throw Exception(\"the root is necessary for creating a glissando\")\n\n                    val glissando: Glissando = if (list.last() is Note) {\n                        val g = Glissando(list.removeLast().cast())\n                        list += g\n                        g\n                    } else if (list.last() is Glissando) {\n                        list.last().cast()\n                    } else throw Exception(\"build glissando failed: unsupported type: ${list.last()}\")\n\n                    doAfter += {\n                        glissando += list.removeLast().cast()\n                    }\n                }\n\n                '≈' -> {\n                    if (list.isEmpty()) throw Exception(\"the root is necessary for creating a glissando\")\n\n                    val glissando: Glissando = if (list.last() is Note) {\n                        val g = Glissando(list.removeLast().cast())\n                        g.isWave = true\n                        list += g\n                        g\n                    } else if (list.last() is Glissando) {\n                        list.last().cast()\n                    } else throw Exception(\"build glissando failed: unsupported type: ${list.last()}\")\n\n                    doAfter += {\n                        glissando += list.removeLast().cast()\n                    }\n                }\n\n                '+' -> {\n                    checkSuffixModifyAvailable()\n\n                    if (list.last() is CanModifyTargetDuration)\n                        list.last().cast<CanModifyTargetDuration>().getTargetDuration().double\n                    else list.last().duration.double\n                }\n\n                '-' -> {\n                    checkSuffixModifyAvailable()\n\n                    if (list.last() is CanModifyTargetDuration)\n                        list.last().cast<CanModifyTargetDuration>().getTargetDuration().halve\n                    else list.last().duration.halve\n                }\n\n                '.' -> {\n                    checkSuffixModifyAvailable()\n\n                    if (list.last() is CanModifyTargetDuration)\n                        list.last().cast<CanModifyTargetDuration>().getTargetDuration().point\n                    else list.last().duration.point\n                }\n\n                '/' -> {\n                    checkSuffixModifyAvailable()\n                    val denominator = afterMacro.nextOnlyInt(index, 1).toDouble()\n                    skipper = 1 // 跳过之后一位\n\n                    if (list.last() is CanModifyTargetDuration)\n                        list.last().cast<CanModifyTargetDuration>().getTargetDuration().denominator = denominator\n                    else\n                        list.last().duration.denominator = denominator\n                }\n\n                'x' -> {\n                    checkSuffixModifyAvailable()\n                    val multiple = afterMacro.nextOnlyInt(index, 1).toDouble()\n                    skipper = 1 // 跳过之后一位\n\n                    if (list.last() is CanModifyTargetDuration)\n                        list.last().cast<CanModifyTargetDuration>().getTargetDuration().multiple = multiple\n                    else\n                        list.last().duration.multiple = multiple\n                }\n            }\n\n            if (isStave) {\n                when(char) {\n                    in \"abcdefgABCDEFG~^vmwnui!pqsz\" -> {\n                        doAfter(char)\n                    }\n\n                    in \"多哆瑞来米咪发唆嗦索拉啦稀西希\" -> {\n                        if (useMandarinOnomatopoeia) doAfter(char)\n                    }\n                }\n            } else {\n                when(char) {\n                    in \"1234567~^vmwnupqsz\" -> {\n                        doAfter(char)\n                    }\n\n                    in \"多哆瑞来米咪发唆嗦索拉啦稀西希\" -> {\n                        if (useMandarinOnomatopoeia) doAfter(char)\n                    }\n                }\n            }\n\n        } else if (skipper > 0) {\n            skipper --\n        } else throw Exception(\"skipper should not be negative\")\n    }\n\n    return list\n}\n\nclass MacroConfiguration {\n\n    companion object {\n        val variableNamePattern = Regex(\"([a-zA-Z_@]\\\\w*)\")\n        val getVariableValuePattern = Regex(\"=\\\\s*${variableNamePattern.pattern}\\\\s*\")\n        val definePattern = Regex(\"def\\\\s+${variableNamePattern.pattern}\\\\s*=\\\\s*[^>\\\\s][^>]*\")\n        val executePattern = Regex(\"def\\\\s+${variableNamePattern.pattern}\\\\s*:\\\\s*[^>\\\\s][^>]*\")\n        val macroDefinePattern = Regex(\"macro\\\\s+[a-zA-Z_]\\\\w*\\\\s+([a-zA-Z_]\\\\w*)(\\\\s*,\\\\s*([a-zA-Z_]\\\\w*))*\\\\s*:(\\\\s*[^>\\\\s][^>]*)\")\n        val macroUsePattern = Regex(\"!([a-zA-Z_]\\\\w*)\\\\s+[^>]+\")\n        val ifDefinePattern = Regex(\"ifdef\\\\s+([a-zA-Z_]\\\\w*)\\\\s+[^>]+\")\n        val ifNotDefinePattern = Regex(\"if!def\\\\s+([a-zA-Z_]\\\\w*)\\\\s+[^>]+\")\n        val repeatPattern = Regex(\"repeat\\\\s+(\\\\d+)\\\\s*:\\\\s*[^>]+\")\n        val includePattern = Regex(\"include\\\\s+((https?|ftp|file)://)?[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]\")\n        val commentPattern = Regex(\"#\\\\s+[\\\\s\\\\S]+\")\n        val velocityPattern = Regex(\"velocity\\\\s+(linear\\\\s|func\\\\s)(\\\\d{1,3}\\\\s*~\\\\s*\\\\d{1,3})\\\\s*:\\\\s*[^>]+\")\n    }\n\n    var recursionCount = 0 // 递归次数统计\n    val logger: MacroConfigurationBuilder.LoggerImpl = MacroConfigurationBuilder.LoggerImpl()\n    // var useStrict = false\n    var recursionLimit = 10\n    var outerScope = mutableMapOf<String, String>()\n    var macroScope = mutableMapOf<String, Pair<List<String>, String>>()\n\n    var fetch: (String) -> String = {\n        if (it.startsWith(\"file://\")) {\n            // File(it.replace(\"file://\", \"\")).readText()\n            TODO(\"read file\")\n        } else {\n//            URL(it).openStream().reader().readText()\n            TODO(\"read file\")\n        }\n    }\n}\n\nclass MacroConfigurationBuilder(private val config: MacroConfiguration = MacroConfiguration()) {\n    fun loggerInfo(block: (String)-> Unit): MacroConfigurationBuilder {\n        config.logger.info = block\n        return this\n    }\n\n    fun loggerError(block: (Exception)-> Unit): MacroConfigurationBuilder {\n        config.logger.error = block\n        return this\n    }\n\n    fun fetchMethod(block: (String)-> String): MacroConfigurationBuilder {\n        config.fetch = block\n        return this\n    }\n\n    fun setScopes(outer: MutableMap<String, String>, macro: MutableMap<String, Pair<List<String>, String>>): MacroConfigurationBuilder {\n        config.outerScope = outer\n        config.macroScope = macro\n        return this\n    }\n\n    fun recursionLimit(times: Int): MacroConfigurationBuilder {\n        config.recursionLimit = times\n        return this\n    }\n\n    class LoggerImpl {\n        var info: (String) -> Unit = { println(\"info>>$it\") }\n        var error: (Exception) -> Unit = { println(\"err>>$it\") }\n    }\n\n    fun build(): MacroConfiguration = config\n}\n\ndata class MiderCodeParserConfiguration(\n    var formatMode: String = \"internal->java-lame\",\n    var isBlankReplaceWith0: Boolean = false,\n    var macroConfiguration: MacroConfiguration = MacroConfiguration(),\n    var convertMidiEventConfiguration: ConvertMidiEventConfiguration = ConvertMidiEventConfiguration()\n)\n\nclass MiderCodeParserConfigurationBuilder(private val config: MiderCodeParserConfiguration = MiderCodeParserConfiguration()) {\n\n    fun setFormatMode(fm: String): MiderCodeParserConfigurationBuilder {\n        config.formatMode = fm\n        return this\n    }\n    fun setIsBlankReplaceWith0(i0: Boolean): MiderCodeParserConfigurationBuilder {\n        config.isBlankReplaceWith0 = i0\n        return this\n    }\n    fun setMacroConfiguration(mc: MacroConfiguration): MiderCodeParserConfigurationBuilder {\n        config.macroConfiguration = mc\n        return this\n    }\n    fun setConvertMidiEventConfiguration(cmec: ConvertMidiEventConfiguration): MiderCodeParserConfigurationBuilder {\n        config.convertMidiEventConfiguration = cmec\n        return this\n    }\n\n    fun build(): MiderCodeParserConfiguration = config\n}\n\nfun getLyricAffectedNotes(list: List<InMusicScore>, lyrics: Int): List<InMusicScore> {\n    var counter = 0\n    val ret = mutableListOf<InMusicScore>()\n    list.reversed().forEach {\n        if (counter == lyrics) return@forEach\n\n        when (it) {\n            is Note, is Chord -> {\n                ret += it\n                counter ++\n            }\n        }\n    }\n\n    if (counter != lyrics) throw Exception(\"there are $lyrics note/chord need to pair lyric, but $counter provide.\")\n    return ret.reversed()\n}\n","package org.mider\n\nimport org.mider.descr.Appoggiatura\nimport org.mider.descr.InMusicScore\nimport org.mider.descr.Note\nimport org.mider.descr.NoteContainer\nimport kotlin.contracts.ExperimentalContracts\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmSynthetic\nimport kotlin.math.exp\nimport kotlin.math.ln\n\nfun bpm2tempo(bpm: Int) = (60 * 1000000) / bpm\n\nfun Int.as4lByteArray(): ByteArray {\n    val bytes = ByteArray(4)\n    bytes[0] = (this shr 24 and 0xff).toByte()\n    bytes[1] = (this shr 16 and 0xff).toByte()\n    bytes[2] = (this shr 8 and 0xff).toByte()\n    bytes[3] = this.toByte()\n    return bytes\n}\n\nfun Int.as3lByteArray(): ByteArray {\n    val bytes = ByteArray(3)\n    bytes[0] = (this shr 16 and 0xff).toByte()\n    bytes[1] = (this shr 8 and 0xff).toByte()\n    bytes[2] = this.toByte()\n    return bytes\n}\n\nfun Int.as2lByteArray(): ByteArray {\n    val bytes = ByteArray(2)\n    bytes[0] = (this shr 8 and 0xff).toByte()\n    bytes[1] = this.toByte()\n    return bytes\n}\n\nfun Int.as1lByteArray(): ByteArray {\n    return byteArrayOf(this.toByte())\n}\n\n// variable length byte array\nfun Int.asvlByteArray(): ByteArray {\n    if (this == 0) return byteArrayOf(0)\n\n    return when (this) {\n        in 0..0x7f -> {\n            this.as1lByteArray()\n        }\n\n        in 0x80..0x3fff -> {\n            byteArrayOf(\n                (this shr 7 or 0b1000_0000).toByte(),\n                (this and 0b0111_1111).toByte())\n        }\n\n        in 0x4000..0x1fffff -> {\n            byteArrayOf(\n                (this shr 14 or 0b1000_0000).toByte(),\n                (this shr  7 or 0b1000_0000).toByte(),\n                (this and 0b0111_1111).toByte())\n        }\n\n        in 0x200000..0xfffffff -> {\n            byteArrayOf(\n                (this shr 21 or 0b1000_0000).toByte(),\n                (this shr 14 or 0b1000_0000).toByte(),\n                (this shr  7 or 0b1000_0000).toByte(),\n                (this and 0b0111_1111).toByte())\n        }\n\n        else -> throw Exception(\"out of stack: $this, only 4 bytes allow\")\n    }\n}\n\nfun Int.asByteArray(): ByteArray {\n    val arr = this.as4lByteArray()\n    val u0 = 0.toByte()\n    return if (arr[0] == u0) {\n        if (arr[1] == u0) {\n            if (arr[2] == u0)\n                if (arr[3] == u0) byteArrayOf(u0) else byteArrayOf(arr[3])\n            else byteArrayOf(arr[2], arr[3])\n        } else byteArrayOf(arr[1], arr[2], arr[3])\n    } else arr\n}\n\nfun bpm(ib: Int): ByteArray {\n//    val data = bpm2tempo(ib).asByteArray()\n//    val res = ByteArray(1 + data.size)\n//    res[0] = data.size.toByte()\n//    data.forEachIndexed { i, _ ->\n//        res[i + 1] = data[i]\n//    }\n    return bpm2tempo(ib).asByteArray()\n}\n\noperator fun ByteArray.set(range: IntRange, bytes: ByteArray) {\n    var count = 0\n    for (i in range) {\n        this[i] = bytes[count++]\n    }\n}\n\nclass ByteArrayWrap(private vararg val array: Byte) {\n    constructor(size: Int): this(*ByteArray(size))\n\n    private var mark: Int = 0\n    val size = array.size\n    val indices = array.indices\n    val lastIndex = array.lastIndex\n\n    fun reset() {\n        mark = 0\n    }\n\n    fun put(byte: Byte): ByteArrayWrap {\n        array[mark++] = byte\n        return this\n    }\n\n    fun put(bytes: ByteArray): ByteArrayWrap {\n        for (i in bytes) {\n            put(i)\n        }\n        return this\n    }\n\n    operator fun plusAssign(byte: Byte) {\n        put(byte)\n    }\n\n    operator fun plusAssign(bytes: ByteArray) {\n        put(bytes)\n    }\n\n    operator fun not() = array\n\n    operator fun get(index: Int) = array[index]\n\n    operator fun set(index: Int, value: Byte) {\n        array[index] = value\n    }\n\n    operator fun set(range: IntRange, bytes: ByteArray) {\n        array[range] = bytes\n    }\n\n    override fun toString(): String = array.toList().toString()\n}\n\n@OptIn(ExperimentalContracts::class)\n@JvmSynthetic\ninline fun <reified T : Any> Any?.cast(): T {\n    contract {\n        returns() implies (this@cast is T)\n    }\n    return this as T\n}\n\n\n@OptIn(ExperimentalStdlibApi::class)\nfun ByteArray.showHex() = map {\n    if (it >= 0) {\n        if (it <= 0xf) \"0\" + it.toInt().toString(16) else it.toInt().toString(16)\n    } else it.toInt().toHexString().substring(6, 8)\n}\n\ninline fun Array<Int>.asByteArray() = map { it.toByte() }.toByteArray()\n\n@Deprecated(\"use String.parseToMidiHex instead\")\nfun String.parseToMidiHexBytes(delimiter: String = trim().let {\n    if (it.split(\" \").size == 1 && it.length != 2) \"\" else \" \"\n}) : ByteArray = trim().let {\n    val params = it.split(Regex(\" \"), 2)[1].split(Regex(\", *| +\"))\n    when {\n        it.startsWith(\"o\") -> {\n            val list = mutableListOf<Byte>()\n            val operationOnNote = { opc: Int ->\n                val code = params[0].let { name ->\n                    noteBaseOffset(name.replace(Regex(\"\\\\d\"), \"\").let { noteName ->\n                        when (noteName.length) {\n                            1 -> noteName.last().uppercase()\n                            2 -> noteName.first().toString() + noteName.last().uppercase()\n                            else -> throw Exception(\"no such note name\")\n                        }\n                    }) + (\n                            (name.last().toString().toIntOrNull() ?:\n                            if (name.matches(Regex(\"[#b]?[A-G]\"))) 5\n                            else if (name.matches(Regex(\"[#b]?[a-g]\"))) 4\n                            else throw Exception(\"name matches failed.\"))\n                                    + 1) * 12\n                }\n\n                val time = if (1 in params.indices)\n                    params[1].toInt().asvlByteArray()\n                else byteArrayOf(0)\n\n                val velocity = if (2 in params.indices)\n                    params[2].toInt()\n                else 100\n\n                val channel = if (3 in params.indices)\n                    params[3].toInt()\n                else 0\n\n                time.forEach(list::add)\n                list += (opc or channel).toByte()\n                list += code.toByte()\n                list += velocity.toByte()\n                // on name time velocity channel\n            }\n            if (it.startsWith(\"on\")) operationOnNote(0x90)\n            else if (it.startsWith(\"off\")) operationOnNote(0x80)\n            else throw Exception(\"no such operation: $it\")\n            list.toByteArray()\n        }\n\n        it.startsWith(\"i\") -> {\n            val list = mutableListOf<Byte>()\n\n            val channel = when (it[1]) {\n                ' ', '0' -> 0\n                '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n                -> it[1].digitToInt()\n                else -> throw Exception(\"no such channel: ${it[1]}\")\n            }\n\n            val time = if (1 in params.indices)\n                params[1].toInt().asvlByteArray()\n            else byteArrayOf(0)\n\n            time.forEach(list::add)\n            list += (0xc0 or channel).toByte()\n            list += params[0].toByte()\n\n            list.toByteArray()\n        }\n\n        else -> (if (delimiter == \"\") {\n            if (it.length % 2 != 0) throw Exception(\"length of given hex data is expected to be even.\")\n            else {\n                val list = mutableListOf<String>()\n                it.forEachIndexed { index, char ->\n                    if (index % 2 == 1) list += it[index - 1].toString() + char\n                }\n                list\n            }\n        } else it.split(delimiter)).map { byte -> byte.toInt(16).toByte() }.toByteArray()\n    }\n}\n\n\n// todo 和 dsl 里的方法合并\n\n/**\n * 获取音符对应的 code 偏移\n */\nfun noteBaseOffset(note: String): Int {\n    return when (note) {\n        \"C\", \"#B\" -> 0\n        \"#C\", \"bD\" -> 1\n        \"D\" -> 2\n        \"#D\", \"bE\" -> 3\n        \"E\", \"bF\" -> 4\n        \"F\", \"#E\" -> 5\n        \"#F\", \"bG\" -> 6\n        \"G\" -> 7\n        \"#G\", \"bA\" -> 8\n        \"A\" -> 9\n        \"#A\", \"bB\" -> 10\n        \"B\", \"bC\" -> 11\n        else -> throw Exception(\"no such note $note\")\n    }\n}\n\nfun minorScaleMapper(name: String): Array<String> {\n    return when(name) {\n        \"C\" -> arrayOf(\"-E\", \"-A\", \"-B\")\n        \"D\" -> arrayOf(\"-B\")\n        \"E\" -> arrayOf(\"+F\")\n        \"F\" -> arrayOf(\"-A\", \"-B\", \"-D\", \"-E\")\n        \"G\" -> arrayOf(\"-B\", \"-E\")\n        \"A\" -> arrayOf()\n        \"B\" -> arrayOf(\"+F\", \"+C\")\n        else -> TODO(\"current mode has not implemented\")\n    }\n}\n\nfun List<InMusicScore>.operationExtendNotes(op: (Note) -> Unit) {\n    forEach {\n        when (it) {\n            is Note -> op(it)\n            is NoteContainer -> {\n                it.notes.forEach { note ->\n                    op(note)\n                }\n            }\n            is Appoggiatura -> {\n                op(it.second)\n                op(it.main)\n            }\n        }\n    }\n}\n\n/**\n * 根据 code 获取音符名称, 只能返回升号\n */\nfun noteNameFromCode(code: Int): String {\n    return when(code % 12) {\n        0 -> \"C\"\n        1 -> \"#C\"\n        2 -> \"D\"\n        3 -> \"#D\"\n        4 -> \"E\"\n        5 -> \"F\"\n        6 -> \"#F\"\n        7 -> \"G\"\n        8 -> \"#G\"\n        9 -> \"A\"\n        10 -> \"#A\"\n        11 -> \"B\"\n        else -> throw Exception(\"no such note code: $code\")\n    }\n}\n\n/**\n * 根据 code 获取音符名称, 只能返回降号\n */\nfun noteNameFromCodeFlat(code: Int): String {\n    return when(code % 12) {\n        0 -> \"C\"\n        1 -> \"bD\"\n        2 -> \"D\"\n        3 -> \"bE\"\n        4 -> \"E\"\n        5 -> \"F\"\n        6 -> \"bG\"\n        7 -> \"G\"\n        8 -> \"bA\"\n        9 -> \"A\"\n        10 -> \"bB\"\n        11 -> \"B\"\n        else -> throw Exception(\"no such note code: $code\")\n    }\n}\n\nfun CharSequence.charCount(vararg cmp: Char): Int = filter { char ->\n    var result = 0\n    cmp.forEach { given ->\n        if (char == given) result ++\n    }\n    result > 0\n}.count()\n\nfun deriveInterval(index: Int, scale: Array<Int> = arrayOf(2, 2, 1, 2, 2, 2, 1)): Int {\n    var sum = 0\n    for (i in 0 until index) {\n        sum += scale[i]\n    }\n    return sum\n}\n\nfun nextNoteIntervalInMajorScale(code: Int): Int {\n    return when(code % 12) {\n        0 -> 2  // C\n        1 -> 2  // C#\n        2 -> 2  // D\n        3 -> 2  // D#\n        4 -> 1  // E\n        5 -> 2  // F\n        6 -> 2  // F#\n        7 -> 2  // G\n        8 -> 2  // G#\n        9 -> 2  // A\n        10 -> 2 // A#\n        11 -> 1 // B\n        else -> 2\n    }\n}\n\nfun previousNoteIntervalInMajorScale(code: Int): Int {\n    return when(code % 12) {\n        0 -> 1  // C\n        1 -> 2  // C#\n        2 -> 2  // D\n        3 -> 2  // D#\n        4 -> 2  // E\n        5 -> 1  // F\n        6 -> 2  // F#\n        7 -> 2  // G\n        8 -> 2  // G#\n        9 -> 2  // A\n        10 -> 2 // A#\n        11 -> 2 // B\n        else -> 2\n    }\n}\n\nfun toMusicXmlKeySignature(ks: String): Pair<Int, String> {\n\n    if (ks.isEmpty()) return 0 to \"major\"\n\n    val prefix = if (ks.first() in \"+-b#\") {\n        ks.first().toString()\n    } else \"\"\n\n    val name = (if (ks.first() in \"+-b#\") {\n        ks.substring(1, ks.length)\n    } else ks)[0].toString()\n\n    val mode = (if (ks.first() in \"+-b#\") {\n        ks.substring(2, ks.length)\n    } else ks.substring(1, ks.length))\n\n    val rMode = if (mode == \"min\" || mode == \"minor\") \"minor\" else \"major\"\n    val rPrefix = prefix.replace(\"-\", \"b\").replace(\"+\", \"#\")\n\n    val fifths = when (rPrefix + name + rMode) {\n        \"bCmajor\", \"bAminor\" -> -7\n        \"bGmajor\", \"bEminor\" -> -6\n        \"bDmajor\", \"bBminor\" -> -5\n        \"bAmajor\", \"Fminor\" -> -4\n        \"bEmajor\", \"Cminor\" -> -3\n        \"bBmajor\", \"Gminor\" -> -2\n        \"Fmajor\", \"Dminor\" -> -1\n        \"Cmajor\", \"Aminor\" -> 0\n        \"Gmajor\", \"Eminor\" -> 1\n        \"Dmajor\", \"Bminor\" -> 2\n        \"Amajor\", \"#Fminor\" -> 3\n        \"Emajor\", \"#Cminor\" -> 4\n        \"Bmajor\", \"#Gminor\" -> 5\n        \"#Fmajor\", \"#Aminor\" -> 6\n\n        else -> 0\n    }\n\n    return fifths to rMode\n}\n\n// 求给定 index 之后\nfun String.nextOnlyInt(index: Int, maxBit: Int): Int {\n    var sum = 0\n    var count = 0\n    for (i in 1 .. maxBit) {\n        if (index + i < length) {\n            val nextChar = this[index + i]\n            if (nextChar in '0'..'9') {\n                sum = sum * 10 + (nextChar.code - 48)\n                count ++\n            } else break\n        }\n    }\n\n    if (count == 0) throw Exception(\"there's no integer found after char '${this[index]}', index: $index or maxCount < 1\")\n\n    return sum\n}\n\nfun String.nextGivenChar(index: Int, char: Char, maxBit: Int): String {\n    val sb = StringBuilder()\n    var count = 0\n    for (i in 1 .. maxBit) {\n        if (index + i < length) {\n            val nextChar = this[index + i]\n            if (nextChar != char) {\n                sb.append(nextChar)\n                count ++\n            } else break\n        }\n    }\n\n    if (count == 0) throw Exception(\"there's no char '$char' found after char '${this[index]}', index: $index or maxCount < 1\")\n\n    return sb.toString()\n}\n\nfun List<Note>.glissandoPoints(): List<Pair<Note, Note>> {\n    val list = mutableListOf<Pair<Note, Note>>()\n    for (i in 0 until lastIndex) {\n        list += this[i] to this[i + 1]\n    }\n    return list\n}\n\nfun String.subStringCount(toBeFound: String): Int {\n    var count = 0\n    var index = 0\n    while (indexOf(toBeFound, index).also { index = it } != -1) {\n        index += toBeFound.length\n        count ++\n    }\n    return count\n}\n\nfun String.durationSymbolsToMultiple(c: Double = .0): Double {\n    fun String.div(int: Int) = subStringCount(\"/$int\")\n    fun String.mul(int: Int) = subStringCount(\"x$int\")\n\n    trim().let {\n        val plus = it.charCount('+')\n        val minus = it.charCount('-')\n        val dot = it.charCount('.')\n        var value = (plus - minus) * ln(2.0) + dot * ln(1.5)\n\n        for (i in 3..9) {\n            value += (it.mul(i) - it.div(i)) * ln(i.toDouble())\n        }\n\n        return exp(value + c)\n    }\n}\n","package org.mider.descr\n\nimport org.mider.impl.Cloneable\nimport org.mider.noteBaseOffset\nimport org.mider.noteNameFromCode\nimport org.mider.noteNameFromCodeFlat\nimport org.mider.nextNoteIntervalInMajorScale\nimport org.mider.previousNoteIntervalInMajorScale\n\n/**\n * 描述一个音符, 信息更全面\n * @param code 音符代码 0~127\n * @param alter 正数为升负数为降\n */\nclass Note(\n    /**\n     * 获取 midi code, 但是不受 alter 影响, 获取受 alter 影响后的 code 请使用 actualCode\n     * @see actualCode\n     */\n    var code: Int,\n    override val duration: DurationDescribe = DurationDescribe(),\n    velocity: Int = 100,\n    var isNature: Boolean = false, // 是否添加了还原符号\n    var alter: Int = 0,\n    private var innerAttach: NoteAttach? = null\n) : InMusicScore, HasFlatAndSharp, HasOctave, CanModifyTargetVelocity, CanModifyTargetPitch {\n\n    constructor(name: String, pitch: Int = 4, duration: DurationDescribe = DurationDescribe(), velocity: Int = 100)\n            : this(noteBaseOffset (name) + (pitch + 1) * 12, duration, velocity)\n    constructor(name: Char, pitch: Int = 4, duration: DurationDescribe = DurationDescribe(), velocity: Int = 100)\n            : this(name.uppercase(), pitch, duration, velocity)\n\n    var velocity: Int = velocity\n        set(value) {\n            noteOnVelocity = value\n            noteOffVelocity = value\n            field = value\n        }\n\n    var noteOnVelocity = velocity\n    var noteOffVelocity = velocity\n\n    var attach: NoteAttach? get() {\n        return innerAttach\n    } set(value) {\n        value?.let { passing ->\n            innerAttach?.copy(passing) ?: run {\n                innerAttach = NoteAttach().apply { copy(passing) }\n            }\n        } ?: run {\n            innerAttach = null\n        }\n    }\n\n    /**\n     * 获取实际的 midi code, 建议使用 `actualCode` 而不是 `code`\n     */\n    val actualCode: Int get() = code + alter\n\n    var pitch: Int = 0\n        get() {\n            return code / 12 - 1\n        }\n\n        set(value) {\n            code = code % 12 + (value + 1) * 12\n            field = value\n        }\n\n    val actualPitch: Int\n        get() {\n            return actualCode / 12 - 1\n        }\n\n    val name: String get() = if (alter >= 0) noteNameFromCode(code) else noteNameFromCodeFlat(code)\n\n    val actualName: String get() = if (alter >= 0) noteNameFromCode(actualCode) else noteNameFromCodeFlat(actualCode)\n\n    override fun modifyTargetVelocity(value: Int) {\n        velocity = value\n    }\n\n    override fun modifyTargetOnVelocity(value: Int) {\n        noteOnVelocity = value\n    }\n\n    override fun modifyTargetOffVelocity(value: Int) {\n        noteOffVelocity = value\n    }\n\n    operator fun plusAssign(addPitch: Int) {\n//        code += addPitch * 12\n        pitch += addPitch\n    }\n\n    operator fun minusAssign(addPitch: Int) {\n//        code -= addPitch * 12\n        pitch -= addPitch\n    }\n\n    /**\n     * 直接修改 code, 相比 sharp 的方式不会改变 attach, 即不会存储升降号信息\n     */\n    fun up(times: Int = 1) {\n        code = (code + times) % 128\n    }\n\n    /**\n     * 直接修改 code, 相比 sharp 的方式不会改变 attach, 即不会存储升降号信息\n     */\n    fun down(times: Int = 1) {\n        code -= times\n    }\n\n    /**\n     * 通过修改 attach 的方式修改 code, 通过 actual 获得真实的 code\n     * 可以保留升降号信息\n     */\n    override fun sharp(times: Int) {\n        alter += times\n    }\n\n    /**\n     * 通过修改 attach 的方式修改 code, 通过 actual 获得真实的 code\n     * 可以保留升降号信息\n     */\n    override fun flap(times: Int) {\n        alter -= times\n    }\n\n    fun upperNoteName(times: Int = 1): Note {\n        for (i in 0 until times)\n            code += nextNoteIntervalInMajorScale(code)\n        return this\n    }\n\n    fun lowerNoteName(times: Int = 1): Note {\n        for (i in 0 until times)\n            code -= previousNoteIntervalInMajorScale(code)\n        return this\n    }\n\n    override fun clone(): Note {\n        val note = Note(code, duration.clone(), velocity, isNature, alter, attach?.clone())\n        note.noteOnVelocity = noteOnVelocity\n        note.noteOffVelocity = noteOffVelocity\n        return note\n    }\n\n    override fun higherOctave(pitch: Int) {\n        this += pitch\n    }\n\n    override fun lowerOctave(pitch: Int) {\n        this -= pitch\n    }\n\n    override fun modifyTargetPitch(given: Int) {\n        pitch = given\n    }\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is Note) false else {\n            actualCode == other.actualCode &&\n            duration == other.duration &&\n            velocity == other.velocity &&\n            isNature == other.isNature &&\n            attach == other.attach\n        }\n    }\n\n    override fun toString(): String = \"[$actualCode=${noteNameFromCode(actualCode)}$actualPitch|$duration|${\n        (if (noteOnVelocity != velocity && noteOffVelocity != velocity) \"\" else \"$velocity\") +\n        (if (noteOnVelocity != velocity) \"↓$noteOnVelocity\" else \"\") +\n        (if (noteOffVelocity != velocity) \"↑$noteOffVelocity\" else \"\")\n    }${attach?.let { \"\" + it } ?: \"\" }]\"\n\n    override fun hashCode(): Int {\n        var result = actualCode\n        result = 31 * result + duration.hashCode()\n        result = 31 * result + velocity\n        result = 31 * result + isNature.hashCode()\n        result = 31 * result + (attach?.hashCode() ?: 0)\n        result = 31 * result + actualCode\n        return result\n    }\n}\n\n/**\n * 音符上的附加信息\n *\n */\nopen class Attach(var lyric: String? = null) : Cloneable {\n    open fun copy(value: NoteAttach) {\n        value.lyric?.let { this.lyric = it }\n    }\n\n    override fun clone(): Attach {\n        return Attach(lyric)\n    }\n}\n\nclass NoteAttach(\n    lyric: String? = null,\n    var channel: Int? = null,\n    var gap: RelativeTicks? = null\n) : Attach(lyric) {\n    override fun equals(other: Any?): Boolean {\n        return if (other !is NoteAttach) false else {\n            lyric == other.lyric && channel == other.channel\n        }\n    }\n\n    override fun copy(value: NoteAttach) {\n        super.copy(value)\n        value.channel?.let { this.channel = it }\n        value.gap?.let { this.gap = it }\n    }\n\n    fun clearChannel() {\n        channel = null\n    }\n    fun clearGap() {\n        gap = null\n    }\n    fun clearLyric() {\n        lyric = null\n    }\n\n    override fun clone(): NoteAttach {\n        return NoteAttach(lyric, channel, gap)\n    }\n\n    override fun toString(): String = StringBuilder().apply {\n        lyric?.let {\n            append(\"<lyric: $it>\")\n        }\n\n        channel?.let {\n            append(\"<$it>\")\n        }\n        gap?.let {\n            append(\"<$it>\")\n        }\n    }.toString()\n\n    override fun hashCode(): Int {\n        var result = channel ?: 0\n        result = 31 * result + (gap?.hashCode() ?: 0)\n        return result\n    }\n}\n","package org.mider.code\n\nimport org.mider.MidiInstrument\nimport org.mider.dsl.MiderDSL\n\nval startRegex = Regex(\n    \">(g|f|\\\\d+b)((;[-+b#]?[A-G](min|maj|major|minor)?)|(;\\\\d)|\" +\n           \"(;img)|(;pdf)|(;mscz)|(;sing(:[a-zA-Z-]{2,4})?(:[fm]?\\\\d+)?)|\" +\n           \"(;midi)|(;\\\\d{1,3}%)|(;/\\\\d+)|(;\\\\d+dB)|(;[↑↓]+)|(;\\\\d+(\\\\.\\\\d+)?x)|\" +\n           \"(;i=([a-zA-Z-]+|\\\\d+))|(;\\\\d/\\\\d))*>\"\n)\n\nenum class NotationType {\n    PNGS, MSCZ, PDF\n}\n\ndata class ProduceCoreResult(\n    var miderDSL: MiderDSL = MiderDSL(),\n    var isRenderingNotation: Boolean = false,\n    var isUploadMidi: Boolean = false,\n    var notationType: NotationType? = null,\n    var isSing: Boolean = false,\n    var singSong: Pair<String, String>? = null ,  //  String: 国家, Int: 歌手代号\n    val logs: MutableList<String> = ArrayList()\n)\n\nfun produceCore(msg: String, config: MiderCodeParserConfiguration = MiderCodeParserConfiguration()): ProduceCoreResult {\n\n    val noteLists = msg.split(startRegex).toMutableList()\n    noteLists.removeFirst()\n    val configParts = startRegex.findAll(msg).map { it.value.replace(\">\", \"\") }.toList()\n\n    /*\n     * 在这个块中，ProduceCoreResult 的各个成员被修改，所以是 ProduceCoreResult 的拓展函数\n     */\n    val build: ProduceCoreResult.() -> Unit = {\n        val changeBpm = { tempo: Int -> miderDSL.bpm = tempo }\n        val changeTimeSignature = { pair: Pair<Int, Int> -> miderDSL.timeSignature = pair }\n\n        noteLists.forEachIndexed { index, content ->\n\n            miderDSL.track {\n                var mode = \"\"\n\n                configParts[index].split(\";\").forEach {\n                    when (it) {\n\n                        \"g\" -> pitch = 4 // 这样应该能提升性能吧(\n\n                        \"f\" -> pitch = 3\n\n                        \"midi\" -> isUploadMidi = true\n\n                        \"img\" -> {\n                            isRenderingNotation = true\n                            notationType = NotationType.PNGS\n                        }\n\n                        \"pdf\" -> {\n                            isRenderingNotation = true\n                            notationType = NotationType.PDF\n                        }\n\n                        \"mscz\" -> {\n                            isRenderingNotation = true\n                            notationType = NotationType.MSCZ\n                        }\n\n                        else -> {\n                            if (it.matches(Regex(\"\\\\d+b\"))) {\n                                bpm = it.replace(\"b\", \"\").toInt()\n                                changeBpm(it.replace(\"b\", \"\").toInt())\n                            } else if (it.matches(Regex(\"[-+b#]?[A-G](min|maj|major|minor)?\"))) {\n                                mode = it\n                            } else if (it.matches(Regex(\"\\\\d\"))) {\n                                pitch = it.toInt()\n                            } else if (it.matches(Regex(\"\\\\d/\\\\d\"))) {\n                                val ts = it.split(\"/\")\n                                changeTimeSignature(ts[0].toInt() to ts[1].toInt())\n                            } else if (it.matches(Regex(\"i=([a-zA-Z-]+|\\\\d+)\"))) {\n                                program = MidiInstrument.valueOf(it.replace(\"i=\", \"\"))\n                                logs.add(\"set program to $program\")\n                            } else if (it.matches(Regex(\"sing(:[a-zA-Z-]{2,4})?(:[fm]?\\\\d+)?\"))) {\n                                isSing = true\n                                val ss = it.split(\":\")\n                                when(ss.size) {\n                                    1 -> singSong = \"cn\" to \"f1\"\n                                    2 -> singSong = \"+id\" to ss[1]\n                                    3 -> singSong = ss[1] to ss[2]\n                                }\n                            } else if (it.matches(Regex(\"\\\\d{1,3}%\"))) {\n                                val v = it.replace(\"%\", \"\").toInt()\n                                if (v in 0..100) volume = v.toFloat() / 100\n                            } else if (it.matches(Regex(\"/\\\\d+\"))) {\n                                val p = it.replace(\"/\", \"\").toInt()\n                                duration = 1.0 / p\n                            } else if (it.matches(Regex(\"\\\\d+dB\"))) {\n                                val v = it.replace(\"dB\", \"\").toInt()\n                                if (v in 0..127) velocity = v\n                            } else if (it.matches(Regex(\"\\\\d+(\\\\.\\\\d+)?x\"))) {\n                                duration /= it.replace(\"x\", \"\").toDouble()\n                            } else if (it.matches(Regex(\"[↑↓]+\"))) {\n                                // pitch higher or lower\n                            }\n                        }\n                    }\n                }\n\n                convert2MidiEventConfig = config.convertMidiEventConfiguration\n\n                val sequence = macro(content, config.macroConfiguration)\n\n                val isStave =\n                    Regex(\"[c-gaA-G]\").find(sequence) != null || Regex(\"(\\\\s*b\\\\s*)+\").matches(sequence)\n\n                val execBlock = {\n                    sequence.let {\n                        if (!isStave && config.isBlankReplaceWith0) {\n                            // 如果不是五线谱 且 要替换\n                            it.trim().replace(Regex(\"( {2}| \\\\| )\"), \"0\")\n                        } else it\n                    } (isStave, useMacro = false)\n                }\n\n                if (mode.isNotBlank()) {\n                    mode {\n                        execBlock()\n                    }\n                } else execBlock()\n\n                logs.add(\"track: ${index + 1}\")\n                container.mainList.forEach {\n                    logs.add(\"adding: $it\")\n                }\n            }\n\n        }\n    }\n\n    val result = ProduceCoreResult()\n    result.build()\n\n    return result\n}\n\n@Deprecated(message = \"will be delete\")\nprivate fun MiderDSL.ifUseMode(mode: String, block: MiderDSL.()-> Unit) {\n    if (mode.isNotBlank()) {\n        mode {\n            block()\n        }\n    } else block()\n}\n\n","package org.mider\n\nimport org.mider.descr.*\nimport org.mider.xml.*\n\nclass ConvertMidiEventConfiguration {\n    /**\n     * 琶音各组成音的时间间隔\n     */\n    val arpeggioIntervalDuration: Double = 1.0 / 32\n\n    /**\n     * 倚音时值\n     */\n    val appoggiaturaDuration: Double = 1.0 / 32\n}\n\n/**\n * @param volume 轨道主音量\n */\nfun List<InMusicScore>.convert2MidiMessages(\n    wholeTicks: Int,\n    channel: Int = 0,\n    volume: Float = 1f,\n    config: ConvertMidiEventConfiguration = ConvertMidiEventConfiguration()\n): MutableList<IMessage> {\n\n    val msgs = mutableListOf<IMessage>()\n    var previousTicks = 0L\n    var modifyChannel = channel\n\n    fun Note.getRealChannel() = attach?.channel ?: modifyChannel\n    fun Note.getRealPreviousTicks() = previousTicks.let { pt ->\n        if (pt == 0L) {\n            attach?.gap?.calcTicks(wholeTicks.toLong()) ?: 0L\n        } else pt\n    } //attach?.gap?.let { it.calcTicks(wholeTicks.toLong()) + previousTicks } ?: previousTicks\n    fun Note.getDurationTicks() = duration.value * wholeTicks\n    fun Note.onVelocity() = noteOnVelocity * volume\n    fun Note.offVelocity() = noteOffVelocity * volume\n\n    fun checkList(list: MutableList<Note>) {\n        val first = list.removeFirst()\n        msgs += noteOnMessage(first.actualCode, first.getDurationTicks(), first.noteOnVelocity * volume, first.getRealChannel())\n        msgs += noteOffMessage(first.actualCode, first.duration.value * wholeTicks, first.noteOffVelocity  * volume, first.getRealChannel())\n\n        list.forEach { note ->\n            msgs += noteOnMessage(note.actualCode, 0, note.noteOnVelocity * volume, note.getRealChannel())\n            msgs += noteOffMessage(note.actualCode, note.duration.value * wholeTicks, note.noteOffVelocity  * volume, note.getRealChannel())\n        }\n    }\n\n    forEach {\n        when (it) {\n            is Note -> {\n                msgs += with(it) {\n                    noteOnMessage(actualCode, getRealPreviousTicks(), onVelocity(), getRealChannel())\n                }\n\n                msgs += with(it) {\n                    noteOffMessage(actualCode, getDurationTicks(), offVelocity(), getRealChannel())\n                }\n                previousTicks = 0\n            }\n\n            is Chord -> {\n\n                when (it.arpeggio) {\n                    // 上行琶音\n                    ArpeggioType.Ascending -> {\n\n                        msgs += with(it.rootNote) {\n                            noteOnMessage(actualCode, getRealPreviousTicks(), onVelocity(), getRealChannel())\n                        }\n\n//                        msgs += noteOnMessage(it.rootNote.actualCode, previousTicks, it.rootNote.noteOnVelocity  * volume, it.rootNote.getRealChannel())\n                        var count = 0\n\n                        it.rest.forEach { note ->\n                            msgs += with(note) {\n                                noteOnMessage(\n                                    actualCode,\n                                    (++count) * config.arpeggioIntervalDuration * wholeTicks,\n                                    onVelocity(),\n                                    getRealChannel())\n                            }\n                        }\n\n                        msgs += noteOffMessage(\n                            it.rootNote.actualCode,\n                            it.rootNote.duration.value * wholeTicks - (count) * config.arpeggioIntervalDuration * wholeTicks,\n                            it.rootNote.noteOffVelocity * volume,\n                            it.rootNote.getRealChannel())\n\n                        it.rest.forEach { note ->\n                            msgs += noteOffMessage(note.actualCode, 0, note.noteOffVelocity  * volume, note.getRealChannel())\n                        }\n                    }\n\n                    // 下行琶音\n                    ArpeggioType.Downward -> {\n                        msgs += noteOnMessage(it.rest.last().actualCode, it.rest.last().getRealPreviousTicks(), it.rest.last().noteOnVelocity  * volume, it.rest.last().getRealChannel())\n\n                        var count = 0\n                        val tpList = mutableListOf<Note>()\n                        tpList += it.rest.reversed()\n                        tpList.removeFirst()\n                        tpList += it.rootNote\n\n                        tpList.forEach { note ->\n                            msgs += noteOnMessage(\n                                note.actualCode,\n                                (++count) * config.arpeggioIntervalDuration * wholeTicks,\n                                note.noteOnVelocity * volume,\n                                note.getRealChannel())\n                        }\n\n                        msgs += noteOffMessage(\n                            it.rest.last().actualCode,\n                            it.rest.last().duration.value * wholeTicks - (count) * config.arpeggioIntervalDuration * wholeTicks,\n                            it.rest.last().noteOffVelocity * volume,\n                            it.rest.last().getRealChannel())\n\n                        tpList.forEach { note ->\n                            msgs += noteOffMessage(note.actualCode, 0, note.noteOffVelocity  * volume, note.getRealChannel())\n                        }\n                    }\n\n                    else -> {\n                        msgs += noteOnMessage(it.rootNote.actualCode, it.rootNote.getRealPreviousTicks(), it.rootNote.noteOnVelocity  * volume, it.rootNote.getRealChannel())\n                        it.rest.forEach { note ->\n                            msgs += noteOnMessage(note.actualCode, 0, note.noteOnVelocity  * volume, note.getRealChannel())\n                        }\n\n                        if (it.isIndependentDuration) {\n                            // 找出时值最短的, 最长的便是 和弦时值\n                            val notes = it.clone().notes\n                            notes.sortWith { n1, n2 ->\n                                (480 * (n1.duration.value - n2.duration.value)).toInt()\n                            }\n\n                            var previousCount = 0\n                            notes.forEach { n ->\n                                val duration = (n.duration.value * wholeTicks - previousCount).toInt()\n                                msgs += noteOffMessage(n.actualCode, duration, n.noteOffVelocity  * volume, n.getRealChannel())\n                                previousCount += duration\n                            }\n\n                        } else {\n                            msgs += noteOffMessage(it.rootNote.actualCode, it.rootNote.duration.value * wholeTicks, it.rootNote.noteOffVelocity * volume, it.rootNote.getRealChannel())\n                            it.rest.forEach { note ->\n                                msgs += noteOffMessage(note.actualCode, 0, note.noteOffVelocity  * volume, note.getRealChannel())\n                            }\n                        }\n                    }\n                }\n\n                previousTicks = 0\n            }\n\n            is Scale -> {\n                checkList(it.clone().notes)\n                previousTicks = 0\n            }\n\n            is TieNote -> {\n                msgs += noteOnMessage(it.main.actualCode, it.main.getRealPreviousTicks(), it.main.noteOnVelocity * volume, it.main.getRealChannel())\n                msgs += noteOffMessage(it.main.actualCode, it.duration.value * wholeTicks, it.main.noteOffVelocity  * volume, it.main.getRealChannel())\n                previousTicks = 0\n            }\n\n            is Rest -> {\n                previousTicks += (it.duration.value * wholeTicks).toInt()\n            }\n\n            is Appoggiatura -> {\n\n                if (it.isFront) {\n                    msgs += noteOnMessage(it.second.actualCode, it.second.getRealPreviousTicks(), it.second.noteOnVelocity * volume, it.second.getRealChannel())\n                    msgs += noteOffMessage(it.second.actualCode, config.appoggiaturaDuration * wholeTicks, it.second.noteOffVelocity * volume, it.second.getRealChannel())\n\n                    msgs += noteOnMessage(it.main.actualCode, 0, it.main.noteOnVelocity * volume, it.main.getRealChannel())\n                    msgs += noteOffMessage(it.main.actualCode, (it.main.duration.value - config.appoggiaturaDuration) * wholeTicks, it.main.noteOffVelocity * volume, it.main.getRealChannel())\n\n                } else {\n                    msgs += noteOnMessage(it.second.actualCode, it.second.getRealPreviousTicks(), it.second.noteOnVelocity * volume, it.second.getRealChannel())\n                    msgs += noteOffMessage(it.second.actualCode, (it.second.duration.value - config.appoggiaturaDuration) * wholeTicks, it.second.noteOffVelocity * volume, it.second.getRealChannel())\n\n                    msgs += noteOnMessage(it.main.actualCode, 0, it.main.noteOnVelocity * volume, it.main.getRealChannel())\n                    msgs += noteOffMessage(it.main.actualCode, config.appoggiaturaDuration * wholeTicks, it.main.noteOffVelocity * volume, it.main.getRealChannel())\n                }\n\n                previousTicks = 0\n            }\n\n            is Glissando -> {\n\n                val allList = mutableListOf<Note>()\n\n                if (it.isWave) {\n                    // todo 波形滑音\n                } else {\n                    if (it.isContainBlack) {\n                        it.notes.glissandoPoints().forEach { pair ->\n                            val first = pair.first.clone()\n                            first.duration += pair.second.duration\n                            val countScale = Scale.generate(first, pair.second)\n                            val notesCount = countScale.notes.size\n                            val duration = DurationDescribe(default = first.duration.value)\n                            duration.denominator = notesCount.toDouble()\n                            val rScale = Scale.generate(first, pair.second, duration)\n                            val notes = rScale.notes\n                            allList += notes\n                        }\n                    } else {\n                        it.notes.glissandoPoints().forEach { pair ->\n                            val first = pair.first.clone()\n                            first.duration += pair.second.duration\n                            val countScale = Scale.generate(first, pair.second)\n                            countScale under arrayOf(2, 2, 1, 2, 2, 2, 1)\n                            val notesCount = countScale.notes.size\n                            val duration = DurationDescribe(default = first.duration.value)\n                            duration.denominator = notesCount.toDouble()\n                            val rScale = Scale.generate(first, pair.second, duration)\n                            rScale under arrayOf(2, 2, 1, 2, 2, 2, 1)\n                            val notes = rScale.notes\n                            allList += notes\n                        }\n                    }\n\n                    checkList(allList)\n                }\n\n                previousTicks = 0\n            }\n\n            is InMusicScoreMidiNormalEvent -> {\n                modifyChannel = it.channel\n                msgs += Message(Event(it.type, it.args, it.channel.toByte()))\n            }\n\n            is InMusicScoreMidiMetaEvent -> {\n                msgs += MetaMessage(MetaEvent(it.type, it.args))\n            }\n\n            is InMusicScoreEvent -> {\n                msgs += HexMessage(it.getHex(wholeTicks, previousTicks.toInt()))\n                previousTicks = 0\n            }\n        }\n    }\n\n    return msgs\n}\n\nfun List<InMusicScore>.convert2MusicXml(\n    tempo: Int = 80,\n    beats: Int = 4,\n    beatType: Int = 4,\n    divisions: Int = 480, // 四分音符所代表的 tick 数字\n    keySignature: String? = null\n): MusicXml {\n    val xmlObj = MusicXml(false)\n\n    xmlObj.part {\n\n        val allMeasureList = mutableListOf<MutableList<NoteElement>>()\n\n        val measureTicks = beats * divisions * beatType / 4 // 一个小节的 tick 数\n\n        var aMeasureCount = 0\n\n        val aMeasureList = mutableListOf<NoteElement>() // 一个小节所包含的音符\n\n        val addLater = mutableListOf<NoteElement>()\n\n        forEachIndexed { index, it ->\n\n            if (addLater.isNotEmpty()) {\n                addLater.forEach { ne ->\n                    aMeasureList += ne\n                    aMeasureCount += ne.duration\n                }\n                addLater.clear()\n            }\n\n            if (aMeasureCount < measureTicks) {\n                it.toNoteElement(divisions)?.let { ne ->\n                    aMeasureList += ne\n                    aMeasureCount += it.durationInDivision(divisions)\n\n                    if (index == lastIndex) {\n                        // 列尾, 结束循环\n                        allMeasureList += aMeasureList.lightClone()\n                        return@forEachIndexed\n                    }\n                }\n            }\n\n            if (aMeasureCount > measureTicks) {\n                // 切分\n                it.separate(aMeasureCount - measureTicks, divisions)?.let { pair ->\n                    aMeasureList.removeLast()\n\n                    aMeasureList += pair.first // pair.second 的 duration 是 aMeasureCount - measureTicks\n\n                    addLater += pair.second\n\n                    allMeasureList += aMeasureList.lightClone()\n                    aMeasureList.clear()\n                    aMeasureCount = 0\n                }\n            } else if (aMeasureCount == measureTicks) {\n                // 正好凑成一个小节的长度\n                allMeasureList += aMeasureList.lightClone()\n                aMeasureList.clear()\n                aMeasureCount = 0\n            }\n        }\n\n        if (allMeasureList.size >= 1) {\n            val firstMeasure = allMeasureList.removeFirst()\n\n            measure {\n                attr(AttributesElement().addDivisions(divisions).let { self ->\n                    keySignature?.let { ksef ->\n                        val ks = toMusicXmlKeySignature(ksef)\n                        self.addKeySignature(ks.first, ks.second)\n                    } ?: self.addKeySignature()\n                }.addTimeSignature(beats, beatType).addClef())\n\n                direction(DirectionElement(tempo))\n                firstMeasure.forEach(::note)\n            }\n\n            allMeasureList.forEach { measure ->\n                measure {\n                    measure.forEach(::note)\n                }\n            }\n        }\n\n    }\n\n    return xmlObj\n}\n\nprivate fun InMusicScore.separate(left: Int, divisions: Int): Pair<MutableList<NoteElement>, MutableList<NoteElement>>? {\n\n    val first = toNoteElement(divisions, durationInDivision(divisions) - left)\n    val second = if (this is Note && attach != null && attach?.lyric != null) {\n        // 去除第二部分的歌词\n        val one = clone()\n        one.attach = null\n        one.toNoteElement(divisions, left)\n    } else toNoteElement(divisions, left)\n\n    if (first == null || second == null) return null\n\n    val n1 = NotationElement()\n    n1.addTied(\"start\")\n\n    val n2 = NotationElement()\n    n2.addTied(\"stop\")\n\n    if (this !is Rest) {\n        // 休止符不需要 tied\n        first.forEach { it.addNotation(n1) }\n        second.forEach { it.addNotation(n2) }\n    }\n\n    return first to second\n}\n\nprivate fun InMusicScore.durationInDivision(divisions: Int) = (duration.value * divisions * 4).toInt()\n\nprivate fun InMusicScore.toNoteElement(divisions: Int, duration: Int = durationInDivision(divisions)): MutableList<NoteElement>? {\n    return when (this) {\n\n        is Note -> {\n            mutableListOf(\n                autoAlter(duration)\n                .setDurationType(divisions)\n                .let { self ->\n                    if (attach != null && attach?.lyric != null)\n                        self.addLyric(attach?.lyric ?: \"\")\n                    self\n                }\n            )\n        }\n\n        is TieNote -> {\n            mutableListOf(\n                autoAlter(duration)\n                    .setDurationType(divisions)\n                    .let { self ->\n                        if (main.attach != null && main.attach?.lyric != null)\n                            self.addLyric(main.attach?.lyric ?: \"\")\n                        self\n                    }\n            )\n        }\n\n        is Rest -> {\n            val element = NoteElement(duration).setDurationType(divisions)\n            element.children.nodes.add(0, Node(\"rest\"))\n            mutableListOf(element)\n        }\n\n        is Chord -> {\n            val root = rootNote.autoAlter(duration).setDurationType(divisions)\n\n            root.let { self ->\n                if (attach != null && attach?.lyric != null)\n                    self.addLyric(attach?.lyric ?: \"\")\n            }\n\n            val list = mutableListOf(root)\n\n            rest.forEach {\n                val chord = it.autoAlter(duration)\n                chord.children.nodes.add(0, Node(\"chord\"))\n                list += chord\n            }\n\n            list\n        }\n\n        else -> null\n    }\n}\n\nprivate fun Note.autoAlter(givenDuration: Int): NoteElement {\n\n    var aAlter = alter\n    if (name.contains(\"#\")) {\n        aAlter = 1\n    } else if (name.contains(\"b\")) {\n        aAlter = -1\n    }\n\n    return if (aAlter == 0) {\n        NoteElement(name\n            .replace(\"#\", \"\")\n            .replace(\"b\", \"\"),\n            pitch, givenDuration)\n    } else {\n        NoteElement(name\n            .replace(\"#\", \"\")\n            .replace(\"b\", \"\"),\n            pitch, givenDuration, aAlter)\n    }\n}\n\nprivate fun TieNote.autoAlter(givenDuration: Int): NoteElement = main.autoAlter(givenDuration)\n\n\nprivate fun NoteElement.setDurationType(divisions: Int): NoteElement {\n    return when (divisions.toFloat() / duration) {\n\n        // 特殊时值\n        480f * 4 / 3 -> addType(DurationType.half) // 二分三连音\n        480f * 2 / 3 -> addType(DurationType.quarter) // 四分三连音\n        480f / 3 -> addType(DurationType.eighth) // 八分三连音\n        480f / 6 -> addType(DurationType.d16th) // 十六分三连音\n        480f / 12 -> addType(DurationType.d32th) // 三十二分三连音\n\n        // 普通时值\n        480f / (1920 * 1.5f) -> {\n            addType(DurationType.whole)\n            addDot()\n        }\n        480f / (1920 * 1.5f * 1.5f) -> {\n            addType(DurationType.whole)\n            addDot().addDot()\n        }\n        480f / 1920 -> addType(DurationType.whole)\n\n        480f / (960 * 1.5f) -> {\n            addType(DurationType.half)\n            addDot()\n        }\n        480f / (960 * 1.5f * 1.5f) -> {\n            addType(DurationType.half)\n            addDot().addDot()\n        }\n        480f / 960 -> addType(DurationType.half)\n\n        480f / (240 * 1.5f) -> {\n            addType(DurationType.eighth)\n            addDot()\n        }\n        480f / (240 * 1.5f * 1.5f) -> {\n            addType(DurationType.eighth)\n            addDot().addDot()\n        }\n        480f / 240 -> addType(DurationType.eighth)\n\n        480f / (120 * 1.5f) -> {\n            addType(DurationType.d16th)\n            addDot()\n        }\n        480f / (120 * 1.5f * 1.5f) -> {\n            addType(DurationType.d16th)\n            addDot().addDot()\n        }\n        480f / 120 -> addType(DurationType.d16th)\n\n        480f / (60 * 1.5f) -> {\n            addType(DurationType.d32th)\n            addDot()\n        }\n        480f / (60 * 1.5f * 1.5f) -> {\n            addType(DurationType.d32th)\n            addDot().addDot()\n        }\n        480f / 60 -> addType(DurationType.d32th)\n\n        480f / (30 * 1.5f) -> {\n            addType(DurationType.d64th)\n            addDot()\n        }\n        480f / (30 * 1.5f * 1.5f) -> {\n            addType(DurationType.d64th)\n            addDot().addDot()\n        }\n        480f / 30 -> addType(DurationType.d64th)\n\n        480f / (15 * 1.5f) -> {\n            addType(DurationType.d128th)\n            addDot()\n        }\n        480f / (15 * 1.5f * 1.5f) -> {\n            addType(DurationType.d128th)\n            addDot().addDot()\n        }\n        480f / 15 -> addType(DurationType.d128th)\n\n        480f / (480 * 1.5f) -> {\n            addType(DurationType.quarter)\n            addDot()\n        }\n        480f / (480 * 1.5f * 1.5f) -> {\n            addType(DurationType.quarter)\n            addDot().addDot()\n        }\n        else -> addType(DurationType.quarter)\n    }\n}\n\nprivate fun <E> List<E>.lightClone(): MutableList<E> {\n    val list = mutableListOf<E>()\n    forEach {\n        list += it\n    }\n    return list\n}\n\nprivate fun noteOnMessage(code: Int, duration: Number, velocity: Number, channel: Int = 0): Message {\n    return Message(EventType.note_on, byteArrayOf(code.toByte(), velocity.toByte()), time = duration.toInt(), channel = channel.toByte())\n}\n\nprivate fun noteOffMessage(code: Int, duration: Number, velocity: Number, channel: Int = 0): Message {\n    return Message(EventType.note_off, byteArrayOf(code.toByte(), velocity.toByte()), time = duration.toInt(), channel = channel.toByte())\n}","package org.mider.xml\n\nimport kotlin.properties.Delegates\n\nconst val xmlHead = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"\nconst val xmlDocType = \"<!DOCTYPE score-partwise PUBLIC\\n\" +\n        \"    \\\"-//Recordare//DTD MusicXML 3.0 Partwise//EC\\\"\\n\" +\n        \"    \\\"http://www.musicxml.org/dtds/partwise.dtd\\\">\"\n\nobject LyricInception {\n    var replace: ((String) -> String)? = null\n}\n\n/**\n * music xml 根节点\n */\nclass ScorePartWiseElement(version: String = \"3.0\") : DeepNode(\"score-partwise\") {\n    var partsCount: Int = 1\n    val partList = Node(\"part-list\")\n\n    init {\n        attributes[\"version\"] = version\n        this += partList\n    }\n\n    inline fun addPart(block: (String) -> Node) {\n        val id = \"P\" + (partsCount++)\n        partList += Node(\"score-part\", mutableMapOf(\"id\" to id),\n            Node(\"part-name\", \"Music\")\n        )\n\n        this += block(id)\n    }\n}\n\nclass AttributesElement : DeepNode(\"attributes\") {\n\n    fun addDefault(): AttributesElement {\n        return addDivisions().addKeySignature().addTimeSignature().addClef()\n    }\n\n    fun addDivisions(divisions: Int = 1) : AttributesElement {\n        this += Node(\"divisions\", divisions)\n        return this\n    }\n\n    fun addKeySignature(fifths: Int = 0, mode: String = \"major\") : AttributesElement{\n        this += Node(\"key\",\n            Node(\"fifths\", fifths),\n            Node(\"mode\", mode)\n        )\n        return this\n    }\n\n    fun addTimeSignature(beats: Int = 4, beatType: Int = 4) : AttributesElement{\n        this += Node(\"time\",\n            Node(\"beats\", beats),\n            Node(\"beat-type\", beatType)\n        )\n        return this\n    }\n\n    fun addClef(sign: String = \"G\", line: Int = 2): AttributesElement {\n        this += Node(\"clef\",\n            Node(\"sign\", sign),\n            Node(\"line\", line)\n        )\n\n        return this\n    }\n}\n\n/**\n * @param perMinute tempo, 每分钟多少拍\n * @param beatUnit 时间单位\n */\nclass DirectionElement(perMinute: Int = 80, beatUnit: DurationType = DurationType.quarter) : DeepNode(\"direction\") {\n    init {\n        this += Node(\"direction-type\",\n            Node(\"metronome\",\n                Node(\"beat-unit\", beatUnit.name),\n                Node(\"per-minute\", perMinute)\n            )\n        )\n        this += Node(\"sound\", \"tempo\" to perMinute)\n    }\n}\n\nclass PitchElement(name: String, octave: Int, alter: Int? = null) : DeepNode(\"pitch\") {\n    init {\n        this += Node(\"step\", name)\n        alter?.let {\n            this += Node(\"alter\", it)\n        }\n        this += Node(\"octave\", octave)\n    }\n}\n\nclass LyricElement(text: String) : DeepNode(\"lyric\") {\n    init {\n        addSyllabic(\"single\")\n\n        this += LyricInception.replace?.let {\n            Node(\"text\", it(text))\n        } ?: Node(\"text\", text)\n\n        addExtend()\n    }\n\n    fun addSyllabic(syllabic: String) {\n        this += Node(\"syllabic\", syllabic)\n    }\n\n    fun addExtend() {\n        this += Node(\"extend\")\n    }\n}\n\nenum class DurationType {\n    whole,\n    half,\n    quarter,\n    eighth,\n    d16th, /*sixteenth*/\n    d32th, /*demisemiquaver*/\n    d64th, /*hemidemisemiquaver*/\n    d128th /*hemidemisemiquaver*/\n}\n\nclass NoteElement : DeepNode {\n\n    var duration by Delegates.notNull<Int>()\n\n    constructor(duration: Int) : super(\"note\") {\n        this += Node(\"duration\", duration)\n        this.duration = duration\n    }\n\n    constructor(name: String, octave: Int, duration: Int, alter: Int? = null) : super(\"note\") {\n        addPitch(name, octave, alter)\n        this += Node(\"duration\", duration)\n        this.duration = duration\n    }\n\n    fun addPitch(name: String, octave: Int, alter: Int? = null): NoteElement {\n        this += PitchElement(name, octave, alter)\n        return this\n    }\n\n    fun addDot(): NoteElement {\n        this += Node(\"dot\")\n        return this\n    }\n\n    fun setRest() : NoteElement {\n        this += Node(\"rest\")\n        return this\n    }\n\n    fun setChord() : NoteElement {\n        this +=  Node(\"chord\")\n        return this\n    }\n\n    fun addLyric(lyric: LyricElement) : NoteElement {\n        this += lyric\n        return this\n    }\n\n    fun addLyric(lyric: String): NoteElement {\n        return addLyric(LyricElement(lyric))\n    }\n\n    fun addTie(type: String = \"start\"): NoteElement {\n        this += Node(\"tie\", \"type\" to type)\n        return this\n    }\n\n    fun addNotation(notation: NotationElement): NoteElement {\n        this += notation\n        return this\n    }\n\n    fun addType(type: DurationType = DurationType.whole): NoteElement {\n        this += Node(\"type\", type.name)\n        return this\n    }\n\n    fun addType(typeName: String): NoteElement {\n        this += Node(\"type\", typeName)\n        return this\n    }\n}\n\nclass NotationElement : DeepNode(\"notations\") {\n    fun addTied(typeName: String): NotationElement {\n        this += Node(\"tied\", \"type\" to typeName)\n        return this\n    }\n\n    fun addSlur(typeName: String): NotationElement {\n        this += Node(\"slur\", \"type\" to typeName)\n        return this\n    }\n\n    fun addArpeggiate(typeName: String): NotationElement {\n        this += Node(\"arpeggiate\", \"type\" to typeName)\n        return this\n    }\n}\n\nclass MeasureElement(number: Int) : DeepNode(\"measure\") {\n    init {\n        attributes[\"number\"] = number\n    }\n\n//    fun addNote(note: NoteElement): MeasureElement {\n//        this += note\n//        return this\n//    }\n//\n//    fun addAttributes(attr: AttributesElement): MeasureElement {\n//        this += attr\n//        return this\n//    }\n\n    fun add(node: Node): MeasureElement {\n        this += node\n        return this\n    }\n}\n\nclass PartElement(id: String) : DeepNode(\"part\") {\n    var numberCount = 1\n\n    init {\n        attributes[\"id\"] = id\n    }\n\n    inline fun addMeasure(block: (Int) -> Node): PartElement {\n        this += block(numberCount++)\n        return this\n    }\n}\n\nclass MusicXml(private val doctype: Boolean = true) {\n    private val root = ScorePartWiseElement()\n\n    class Part(val part: PartElement) {\n\n        class Measure(val measure: MeasureElement) {\n            fun note(note: NoteElement) {\n                measure.add(note)\n            }\n\n            fun attr(attr: AttributesElement) {\n                measure.add(attr)\n            }\n\n            fun direction(direction: DirectionElement) {\n                measure.add(direction)\n            }\n        }\n\n        fun measure(block: Measure.() -> Unit) {\n            part.addMeasure { number ->\n                val measure = MeasureElement(number)\n                Measure(measure).block()\n                measure\n            }\n        }\n    }\n\n    fun part(block: Part.() -> Unit): MusicXml {\n        root.addPart { id ->\n            val part = PartElement(id)\n            Part(part).block()\n            part\n        }\n\n        return this\n    }\n\n    override fun toString(): String = xmlHead + (if (doctype) xmlDocType else \"\") + \"\\n\" + root.toString()\n}\n\n","package org.mider.descr\n\n/**\n * 倚音\n * @param second 倚音\n * @param main 主音\n * @param isFront 是否为前倚音\n */\nclass Appoggiatura(val second: Note, val main: Note, var isFront: Boolean = true) : InMusicScore, CanModifyTargetVelocity, CanModifyTargetDuration, CanModifyTargetPitch {\n    override val duration: DurationDescribe = second.duration\n\n    override fun clone(): Appoggiatura {\n        return Appoggiatura(second.clone(), main.clone(), isFront)\n    }\n\n    override fun getTargetDuration(): DurationDescribe = main.duration\n\n    override fun modifyTargetVelocity(value: Int) {\n        main.velocity = value\n    }\n\n    override fun modifyTargetOnVelocity(value: Int) {\n        main.noteOnVelocity = value\n    }\n\n    override fun modifyTargetOffVelocity(value: Int) {\n        main.noteOffVelocity = value\n    }\n\n    override fun modifyTargetPitch(given: Int) {\n        main.pitch = given\n    }\n\n    override fun toString(): String = \"Appoggiatura: $second $main\"\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is Appoggiatura) false else {\n            second == other.second && main == other.main && isFront == other.isFront\n        }\n    }\n\n    override fun hashCode(): Int {\n        var result = second.hashCode()\n        result = 31 * result + main.hashCode()\n        result = 31 * result + isFront.hashCode()\n        result = 31 * result + duration.hashCode()\n        return result\n    }\n}","package org.mider.descr\n\nenum class ArpeggioType {\n    None, Ascending, Downward\n}\n\nclass Chord(vararg firstNotes: Note) :\n    InMusicScore,\n    HasFlatAndSharp,\n    HasOctave,\n    CanModifyTargetVelocity,\n    CanModifyTargetDuration,\n    CanModifyTargetPitch,\n    NoteContainer\n{\n\n    var attach: ChordAttach? = null\n    var arpeggio: ArpeggioType = ArpeggioType.None\n    var isIndependentDuration: Boolean = false\n\n    init {\n        if (firstNotes.isEmpty()) throw Exception(\"a chord needs notes to buildup\")\n    }\n\n    override val notes = firstNotes.toMutableList()\n\n    val rootNote get() = notes[0]\n\n    // val secondNote get() = notes[1]\n    // val thirdNote get() = notes[2]\n    // val forthNote get() = notes[3]\n    /**\n     * 除根音以外剩下的音符\n     */\n    val rest: List<Note> get() = notes.subList(1, notes.size)\n    override val duration: DurationDescribe = rootNote.duration\n    override fun getTargetDuration(): DurationDescribe = last().duration\n    override fun modifyTargetVelocity(value: Int) {\n        last().velocity = value\n    }\n\n    override fun modifyTargetOffVelocity(value: Int) {\n        last().noteOffVelocity = value\n    }\n\n    override fun modifyTargetOnVelocity(value: Int) {\n        last().noteOnVelocity = value\n    }\n\n    override fun clone(): Chord {\n        val cloneNotes = mutableListOf<Note>()\n        notes.forEach {\n            cloneNotes += it.clone()\n        }\n\n        val one = Chord(*cloneNotes.toTypedArray())\n        one.attach = attach\n        one.arpeggio = arpeggio\n        return one\n    }\n\n    override fun sharp(times: Int) = last().sharp(times)\n\n    override fun flap(times: Int) = last().flap(times)\n\n    override fun higherOctave(pitch: Int) = last().higherOctave(pitch)\n\n    override fun lowerOctave(pitch: Int) = last().lowerOctave(pitch)\n\n    override fun modifyTargetPitch(given: Int) {\n        last().pitch = given\n    }\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is Chord) false else {\n            notes == other.notes && attach == other.attach && arpeggio == other.arpeggio\n        }\n    }\n\n    override fun toString(): String = \"Chord: \" + notes.joinToString(\" \")\n\n    override fun hashCode(): Int {\n        var result = attach?.hashCode() ?: 0\n        result = 31 * result + arpeggio.hashCode()\n        result = 31 * result + notes.hashCode()\n        result = 31 * result + duration.hashCode()\n        return result\n    }\n}\n\nclass ChordAttach(lyric: String? = null) : Attach(lyric)","package org.mider.descr\nimport org.mider.impl.Cloneable\nimport kotlin.math.pow\n\nclass DurationDescribe (\n    var bar: Int = 0, // 符杆数, 默认为 0 也就是 四分音符\n    var dot: Int = 0, // 附点数\n    var default: Double = .25, // 默认为四分音符时值\n    var denominator: Double = 1.0 // 默认分母为 1\n): Cloneable {\n\n    var multiple: Double = 1.0\n    var durationList = mutableListOf<DurationDescribe>()\n    var attach: Double = .0\n\n    val baseValue: Double get() = default * 2.0.pow(bar) * 1.5.pow(dot)\n    val value: Double get() = calc() + multiple / denominator * baseValue + attach\n\n    private fun calc(): Double {\n        return durationList.sumOf { it.value }\n    }\n\n    val point: DurationDescribe\n        get() {\n        dot ++\n        return this\n    }\n\n    fun points(times: Int): DurationDescribe {\n        for (i in 0..<times) point\n        return this\n    }\n\n    val halve: DurationDescribe\n        get() {\n        bar --\n        return this\n    }\n\n    fun halves(times: Int): DurationDescribe {\n        for (i in 0 until times) halve\n        return this\n    }\n\n    val double: DurationDescribe\n        get() {\n        bar ++\n        return this\n    }\n\n    fun double(times: Int): DurationDescribe {\n        for (i in 0..<times) double\n        return this\n    }\n\n    public override fun clone(): DurationDescribe {\n        val describe = DurationDescribe(bar, dot, default, denominator)\n        val copy = mutableListOf<DurationDescribe>()\n        durationList.forEach {\n            copy += it.clone()\n        }\n        describe.durationList = copy\n        describe.multiple = multiple\n        return describe\n    }\n\n    override fun toString(): String = value.toString()\n\n    operator fun plus(duration: DurationDescribe): DurationDescribe {\n        val one = clone()\n        one += duration\n        return one\n    }\n\n    operator fun plusAssign(duration: DurationDescribe) {\n        durationList += duration.clone()\n    }\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is DurationDescribe) false else {\n            value == other.value\n        }\n    }\n\n    override fun hashCode(): Int {\n        var result = bar\n        result = 31 * result + dot\n        result = 31 * result + default.hashCode()\n        result = 31 * result + denominator.hashCode()\n        result = 31 * result + durationList.hashCode()\n        return result\n    }\n\n}","package org.mider.descr\n\nimport org.mider.cast\n\n//\n//interface CanBeGlissed : InMusicScore, HasFlatAndSharp, CanModifyTargetVelocity, HasOctave {\n//\n//    override fun clone(): CanBeGlissed\n//}\n\n/**\n * 滑音\n */\nclass Glissando(private vararg val args: Note) : InMusicScore, HasFlatAndSharp, CanModifyTargetVelocity, HasOctave, CanModifyTargetDuration, CanModifyTargetPitch, NoteContainer {\n    var isWave = false\n    var isContainBlack = false\n    override val notes = args.toMutableList()\n\n    override val duration: DurationDescribe\n        get() {\n            val duration = DurationDescribe()\n            notes.forEach {\n                duration += it.duration\n            }\n\n            return duration\n        }\n\n    override fun getTargetDuration(): DurationDescribe = notes.last().duration\n\n    override fun modifyTargetPitch(given: Int) {\n        notes.last().cast<Note>().pitch = given\n    }\n\n    override fun modifyTargetVelocity(value: Int) {\n        notes.last().cast<Note>().velocity = value\n    }\n\n    override fun modifyTargetOnVelocity(value: Int) {\n        notes.last().cast<Note>().noteOnVelocity = value\n    }\n\n    override fun modifyTargetOffVelocity(value: Int) {\n        notes.last().cast<Note>().noteOffVelocity = value\n    }\n\n    override fun clone(): Glissando {\n        val cloneNotes = mutableListOf<Note>()\n        notes.forEach {\n            cloneNotes += it.clone()\n        }\n\n        val one = Glissando(*cloneNotes.toTypedArray())\n        one.isWave = isWave\n        one.isContainBlack = isContainBlack\n        return one\n    }\n\n    override fun sharp(times: Int) = notes.last().sharp(times)\n\n    override fun flap(times: Int) = notes.last().flap(times)\n\n    override fun higherOctave(pitch: Int) = notes.last().cast<HasOctave>().higherOctave(pitch)\n\n    override fun lowerOctave(pitch: Int) = notes.last().cast<HasOctave>().lowerOctave(pitch)\n\n    override fun toString(): String = \"Glissando: ${notes.joinToString(\" \")}\"\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is Glissando) false else {\n            notes == other.notes && isWave == other.isWave && duration == other.duration\n        }\n    }\n\n    override fun hashCode(): Int {\n        var result = args.contentHashCode()\n        result = 31 * result + isWave.hashCode()\n        result = 31 * result + notes.hashCode()\n        result = 31 * result + duration.hashCode()\n        return result\n    }\n}","package org.mider.descr\n\nimport org.mider.EventType\nimport org.mider.MetaEventType\nimport org.mider.impl.clone\nimport org.mider.parseToMidiHex\nimport org.mider.showHex\n\n/**\n * 位于乐谱中的 MIDI 事件\n */\nclass InMusicScoreMidiNormalEvent(val type: EventType, val args: ByteArray, val channel: Int): InMusicScore, Mute {\n\n    override fun clone(): InMusicScoreMidiNormalEvent {\n        return InMusicScoreMidiNormalEvent(type, args, channel)\n    }\n\n    override val duration = DurationDescribe(default = .0)\n\n    override fun toString(): String = \"[MIDIEvent:$type:${args.toList()}]\"\n}\n\nclass InMusicScoreMidiMetaEvent(val type: MetaEventType, val args: ByteArray): InMusicScore, Mute {\n\n    override fun clone(): InMusicScoreMidiMetaEvent {\n        return InMusicScoreMidiMetaEvent(type, args)\n    }\n\n    override val duration = DurationDescribe(default = .0)\n\n    override fun toString(): String = \"[MIDIMetaEvent:$type:${args.toList()}]\"\n}\n\nclass InMusicScoreEvent : InMusicScore {\n\n    private var pure = true\n    private lateinit var hexString: String\n    private lateinit var hex: ByteArray\n    private val octave: Int\n    private val velocity: Int\n    private val miderDefaultDuration: Double\n\n    constructor(hex: ByteArray, octave: Int = 4, velocity: Int = 100, miderDefaultDuration: Double = .25) {\n        pure = true\n        this.hex = hex\n        this.octave = octave\n        this.velocity = velocity\n        this.miderDefaultDuration = miderDefaultDuration\n    }\n\n    constructor(hexData: String, octave: Int = 4, velocity: Int = 100, miderDefaultDuration: Double = .25) {\n        pure = false\n        hexString = hexData\n        this.octave = octave\n        this.velocity = velocity\n        this.miderDefaultDuration = miderDefaultDuration\n    }\n\n    override val duration = DurationDescribe(default = .0) // unreachable\n\n    fun getHex(wholeTick: Int, previousTicks: Int = 0): ByteArray = if (pure) hex else hexString.trim().parseToMidiHex(wholeTick, octave, velocity, defaultDuration = (1f/miderDefaultDuration).toInt(), previousTicks = previousTicks)\n\n    override fun toString(): String = getHex(960 * 2).showHex().joinToString(\" \")\n\n    override fun clone(): InMusicScore = InMusicScoreEvent(hex.clone(), octave, velocity, miderDefaultDuration)\n}","package org.mider.descr\nimport kotlin.properties.Delegates\n\nclass RelativeTicks {\n\n    private var relativeDuration by Delegates.notNull<Double>()\n    private var ticks by Delegates.notNull<Long>()\n    private val pure: Boolean\n\n    constructor(ticks: Long) {\n        this.ticks = ticks\n        pure = true\n    }\n\n    constructor(relative: Double) {\n        this.relativeDuration = relative\n        pure = false\n    }\n\n    fun calcTicks(wholeTicks: Long): Long {\n        return if (pure) ticks else (wholeTicks * relativeDuration).toLong()\n    }\n\n    override fun toString(): String = if (pure) \"ticks: $ticks\" else \"relative: $relativeDuration\"\n}","package org.mider.descr\nclass Rest(override val duration: DurationDescribe = DurationDescribe()) : InMusicScore {\n    override fun clone(): Rest {\n        return Rest(duration.clone())\n    }\n\n    override fun equals(other: Any?): Boolean = if (other !is Rest) false else duration == other.duration\n\n    override fun toString(): String = \"[Rest|$duration]\"\n\n    override fun hashCode(): Int {\n        return duration.hashCode()\n    }\n}","package org.mider.descr\n\nimport org.mider.annotation.Tested\n\nclass Scale(vararg inputNotes: Note) : InMusicScore, NoteContainer {\n\n    companion object {\n        fun generate(from: Note, to: Note, defaultDuration: DurationDescribe? = null): Scale {\n            if (from.actualCode > to.actualCode) throw Exception(\"from.code has to > to.code\")\n            val list = mutableListOf<Note>()\n            for (i in from.actualCode..to.actualCode) {\n                list += Note(i, defaultDuration ?: from.duration, from.velocity)\n            }\n            return Scale(*list.toTypedArray())\n        }\n    }\n\n    override val duration: DurationDescribe\n        get() {\n            val duration = DurationDescribe()\n            notes.forEach {\n                duration += it.duration\n            }\n\n            return duration\n        }\n\n    override val notes: MutableList<Note> = inputNotes.toMutableList()\n\n    override fun clone(): Scale {\n        val cloneNotes = mutableListOf<Note>()\n        notes.forEach {\n            cloneNotes += it.clone()\n        }\n\n        return Scale(*cloneNotes.toTypedArray())\n    }\n\n    @Tested\n    infix fun step(number: Int) {\n        val first = notes.first()\n        val last = notes.last()\n\n        val list = mutableListOf<Note>()\n        for (i in first.actualCode..last.actualCode step number) {\n            list += Note(i, first.duration, first.velocity)\n        }\n        notes.clear()\n        notes += list\n    }\n\n    @Tested\n    infix fun under(mode: Array<Int>) {\n        var i = notes.first().actualCode\n        var loopc = 0\n        val list = mutableListOf<Note>()\n        while (i <= notes.last().actualCode) {\n            list += Note(i, notes.first().duration, notes.first().velocity)\n            i += mode[loopc % mode.size]\n            loopc++\n        }\n        notes.clear()\n        notes += list\n    }\n\n    override fun toString(): String = notes.joinToString(\"\\n\")\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is Scale) false else {\n            notes == other.notes && duration == other.duration\n        }\n    }\n\n    override fun hashCode(): Int {\n        var result = duration.hashCode()\n        result = 31 * result + notes.hashCode()\n        return result\n    }\n}\n","package org.mider.descr\n\nimport org.mider.noteNameFromCode\n\nclass TieNote(vararg noteList: Note) : InMusicScore, CanModifyTargetDuration, NoteContainer {\n    override val notes: MutableList<Note> = noteList.toMutableList()\n    val main: Note get() = notes.first()\n\n    override val duration: DurationDescribe get() = DurationDescribe(default = notes.sumOf { it.duration.value })\n\n    override fun clone(): TieNote {\n        val cloneNotes = mutableListOf<Note>()\n        notes.forEach {\n            cloneNotes += it.clone()\n        }\n\n        return TieNote(*cloneNotes.toTypedArray())\n    }\n\n    override fun toString(): String = \"[${main.actualCode}=${noteNameFromCode(main.actualCode)}${main.actualPitch}|$duration|${main.velocity}]\"\n\n    fun listToString(): String = \"TieNote: \" + notes.joinToString(\" \")\n\n    override fun equals(other: Any?): Boolean {\n        return if (other !is TieNote) false else notes == other.notes\n    }\n\n    override fun getTargetDuration(): DurationDescribe = notes.last().duration\n\n    override fun hashCode(): Int {\n        return notes.hashCode()\n    }\n}","package org.mider.dsl\n\nimport org.mider.*\nimport org.mider.annotation.Tested\nimport org.mider.code.MacroConfiguration\nimport org.mider.code.toInMusicScoreList\nimport org.mider.descr.*\nimport org.mider.lyric.multiLyricResolve\nimport kotlin.jvm.JvmName\nimport kotlin.math.pow\nimport kotlin.reflect.KProperty\n\nclass InMusicScoreContainer {\n    val mainList: MutableList<InMusicScore> = mutableListOf()\n    var currentList: MutableList<InMusicScore> = mainList\n\n    val mainAttach: MutableMap<String, Any> = mutableMapOf()\n    var currentAttach: MutableMap<String, Any> = mainAttach\n\n    fun pushIntoContainer(im: InMusicScore) {\n        currentList += im\n    }\n\n    fun popFromContainer(times: Int = 1): InMusicScore? {\n        var last: InMusicScore? = null\n        for (i in 0 until times) last = currentList.removeLast()\n        return last\n    }\n\n//    fun pushNoteIntoContainer(note: Note) {\n//\n//    }\n\n    operator fun plusAssign(im: InMusicScore) = pushIntoContainer(im)\n\n    operator fun plusAssign(ims: List<InMusicScore>) {\n        currentList += ims\n    }\n\n    operator fun minus(times: Int): InMusicScore? = popFromContainer(times)\n\n//    operator fun set(pitch: Int, duration: Double, velocity: Int, value: Note) {\n//        pushIntoContainer(value)\n//    }\n\n    fun addAttach(key: String, any: Any) {\n        currentAttach[key] = any\n    }\n\n    fun popAttach(key: String): Any? {\n        val any = currentAttach[key]\n        currentAttach.remove(key)\n        return any\n    }\n\n    fun redirectTo(to: MutableList<InMusicScore>) {\n        currentList = to\n    }\n\n    fun redirectToMain() {\n            currentList = mainList\n    }\n\n    fun redirectAttachTo(to: MutableMap<String, Any>) {\n        currentAttach = to\n    }\n\n    fun redirectAttachToMain() {\n        currentAttach = mainAttach\n    }\n}\n\nclass MiderDSL(\n    var dispatcher: NormalChannelDispatcher = NormalChannelDispatcher()\n) : DispatcherControlled {\n\n    val container = InMusicScoreContainer()\n\n    val otherTracks = mutableListOf<MiderDSL>()\n    private val entrusted = mutableMapOf<String, InMusicScore>()\n\n    var repeatCount: Int = 0\n\n    var volume: Float = 1f // 轨道音量\n\n    val major = 0\n    val minor = 1\n    /**\n     * 大调音阶\n     */\n    val majorScale = arrayOf(2, 2, 1, 2, 2, 2, 1)\n    /**\n     * 小调音阶\n     */\n    val minorScale = arrayOf(2, 1, 2, 2, 1, 2, 2)\n\n    /**\n     * 可以用于构建大三和弦, 大七和弦和大九和弦\n     * 使用方法: `val symbol by C triad majorChord`\n     */\n    val majorChord = arrayOf(4, 3, 4, 3)\n    /**\n     * 可以用于构建小三和弦, 小七和弦, 小九和弦\n     * 使用方法: `val symbol by C triad minorChord`\n     */\n    val minorChord = arrayOf(3, 4, 3, 4)\n    // 属七和弦 属大九和弦\n    val dominant = arrayOf(4, 3, 3, 4)\n    // 属小九和弦\n    val dominantMinorNinth = arrayOf(4, 3, 3, 3)\n    // 增三和弦\n    val augmentedChord = arrayOf(4, 4)\n    // 减三和弦 半减七和弦\n    val diminiITdChord = arrayOf(3, 3, 4)\n    // 减七和弦\n    val decreasedSeventh = arrayOf(3, 3, 3)\n\n    var convert2MidiEventConfig = ConvertMidiEventConfiguration()\n\n    var pitch = 4\n    var channel: Int? = null\n    // note on event 之前的 ticks\n    var gap: RelativeTicks? = null\n    var duration = 1.0 / 4 // 1.0为全音符\n    var velocity = 100\n        set(value) {\n            onVelocity = value\n            offVelocity = value\n            field = value\n        }\n    var onVelocity = velocity\n    var offVelocity = velocity\n    // 是否启用中文拟声词\n    var useMandarinOnomatopoeia = true\n\n\n    var program: MidiInstrument = MidiInstrument.piano\n        set(value) {\n\n//            if (!isModifiedProgram) {\n//                isModifiedProgram = true\n//                channel ++\n//            }\n\n            container += InMusicScoreMidiNormalEvent(\n                EventType.program_change,\n                byteArrayOf(value.id.toByte()),\n                channel ?: dispatcher.getChannel(this)\n            )\n            field = value\n        }\n    var bpm = 80\n//        set(value) {\n//            container += InMusicScoreMidiMetaEvent(\n//                MetaEventType.META_TEMPO,\n//                bpm(bpm)\n//            )\n//            field = value\n//        }\n    var timeSignature: Pair<Int, Int>? = null //= 4 to 4\n    var keySignature: String? = null // getKeySignatureFromN(note('C'), major)\n\n    init {\n        dispatcher.mount(this)\n    }\n\n    val O: Rest get() {\n        val rest = Rest(DurationDescribe(default = duration))\n        container += rest\n        return rest\n    }\n\n    val C: Note get() {\n        val note = creatNote(\"C\")\n        container += note\n        return note\n    }\n\n    val D: Note get() {\n        val note = creatNote(\"D\")\n        container += note\n        return note\n    }\n\n    val E : Note get() {\n        val note = creatNote(\"E\")\n        container += note\n        return note\n    }\n\n    val F : Note get() {\n        val note = creatNote(\"F\")\n        container += note\n        return note\n    }\n\n    val G : Note get() {\n        val note = creatNote(\"G\")\n        container += note\n        return note\n    }\n\n    val A : Note get() {\n        val note = creatNote(\"A\")\n        container += note\n        return note\n    }\n\n    val B: Note get() {\n        val note = creatNote(\"B\")\n        container += note\n        return note\n    }\n\n    fun hex(array: ByteArray) {\n        container += InMusicScoreEvent(array, pitch, velocity, duration)\n    }\n\n    @JvmName(\"hexVarg\")\n    fun hex(vararg byte: Byte) {\n        hex(byte)\n    }\n\n    fun gap(ticks: Number, block: MiderDSL.() -> Unit) {\n        val cachedGap = gap\n        gap = RelativeTicks(ticks.toLong())\n        block()\n        gap = cachedGap\n    }\n    fun gap(ticks: Int) {\n        gap = RelativeTicks(ticks.toLong())\n    }\n\n    fun gap(symbols: String, block: MiderDSL.() -> Unit) {\n        val cachedGap = gap\n        gap(symbols)\n        block()\n        gap = cachedGap\n    }\n\n    fun gap(symbols: String) {\n        if (symbols.isNotBlank())\n            gap = RelativeTicks(symbols.durationSymbolsToMultiple() * duration)\n    }\n\n    fun midiTitle(title: String) = hex(\"title $title\")\n\n    fun midiLyric(lyric: String) = hex(\"lyric $lyric\")\n\n    fun midiInstrumentName(name: String) = hex(\"instrumentName $name\")\n\n    fun hex(data: String) {\n        container += InMusicScoreEvent(data, pitch, velocity, duration)\n    }\n\n    private fun creatNote(name: String) = Note(name, pitch, DurationDescribe(default = duration), velocity).apply {\n        if (onVelocity != velocity)\n            noteOnVelocity = onVelocity\n        if (offVelocity != velocity)\n            noteOffVelocity = offVelocity\n\n        channel?.let {\n            attach = NoteAttach(channel = it)\n        } ?: run {\n            attach?.clearChannel()\n//            attach?.let { it.channel = null }\n        }\n\n        gap?.let {\n            attach = NoteAttach(gap = gap)\n        } ?: attach?.clearGap()\n\n//        if (gap != 0L) {\n//            attach = NoteAttach(gap = gap)\n//        } else {\n//            attach?.clearChannel()\n//        }\n    }\n\n\n    fun printInserted(function: (InMusicScore) -> Unit = ::println) {\n        container.mainList.forEach(function)\n    }\n\n    @Tested\n    fun track(block: MiderDSL.() -> Unit) {\n        val new = MiderDSL(dispatcher)\n//        new.channel = channel + 1 // todo\n        new.block()\n        otherTracks += new\n    }\n\n    fun instrument(ins: MidiInstrument, block: MiderDSL.() -> Unit) {\n        val cache = program\n        program = ins\n        block()\n        program = cache\n    }\n\n    fun instrument(ins: String, block: MiderDSL.() -> Unit) = instrument(MidiInstrument.valueOf(ins), block)\n\n    @Tested\n    fun def(block: MiderDSL.() -> Unit): MiderDSL.() -> Unit = block\n\n    @Tested\n    fun exec(block: MiderDSL.() -> Unit): MiderDSL.() -> Unit {\n        +block\n        return block\n    }\n\n    @Tested\n    operator fun (MiderDSL.() -> Unit).unaryPlus() = this()\n\n    @Tested\n    fun velocity(value: Int, block: MiderDSL.() -> Unit) {\n        val cacheVelocity = velocity\n        val cacheOnVelocity = onVelocity\n        val cacheOffVelocity = offVelocity\n        velocity = value\n        block()\n        velocity = cacheVelocity\n        onVelocity = cacheOnVelocity\n        offVelocity = cacheOffVelocity\n    }\n\n    fun velocity(on: Int, off: Int, block: MiderDSL.() -> Unit) {\n        val cacheOnVelocity = onVelocity\n        val cacheOffVelocity = offVelocity\n        onVelocity = on\n        offVelocity = off\n        block()\n        onVelocity = cacheOnVelocity\n        offVelocity = cacheOffVelocity\n    }\n\n    fun onVelocity(value: Int, block: MiderDSL.() -> Unit) {\n        val cacheVelocity = onVelocity\n        onVelocity = value\n        block()\n        onVelocity = cacheVelocity\n    }\n\n    fun offVelocity(value: Int, block: MiderDSL.() -> Unit) {\n        val cacheVelocity = offVelocity\n        offVelocity = value\n        block()\n        offVelocity = cacheVelocity\n    }\n\n    @Tested\n    fun inserted(block: MiderDSL.() -> Unit): MutableList<InMusicScore> {\n        // todo 考虑异步\n        val list = mutableListOf<InMusicScore>()\n        val cache = container.currentList\n        container.redirectTo(list)\n        block()\n        container.redirectTo(cache)\n//        container.redirectToMain()\n        return list\n    }\n\n    @Tested\n    fun repeat(times: Int = 2, block: MiderDSL.() -> Unit) {\n        val cache = repeatCount\n        for (i in 0 until times) {\n            repeatCount = i + 1\n            block()\n            repeatCount ++\n        }\n        repeatCount = cache\n    }\n\n    /**\n     * 配合 String.invoke(isStave: Boolean = true, useMacro: Boolean = true, config: MacroConfiguration) 使用\n     */\n    @Tested\n    fun scope(block: MiderDSL.() -> Unit) {\n        val cacheDuration = duration\n        val cachePitch = pitch\n        val cacheVelocity = velocity\n        block()\n        velocity = cacheVelocity\n        pitch = cachePitch\n        duration = cacheDuration\n    }\n\n    fun higher(step: Byte = 1, block: MiderDSL.() -> Unit) {\n        val inc = pitch + step\n        inc(block)\n    }\n\n    fun lower(step: Byte = 1, block: MiderDSL.() -> Unit) {\n        val dec = pitch - step\n        dec(block)\n    }\n\n    /**\n     * 根据音阶构建和弦\n     */\n    @Tested\n    fun withInterval(int: Int, block: MiderDSL.() -> Unit) {\n        inserted(block).forEach {\n            container += if (it is Note) {\n                val second = it.clone()\n                if (int > 0) second.up(int) else if (int < 0) it.down(-int)\n                Chord(it, second)\n            } else it\n        }\n    }\n\n    infix fun Int.dot(times: Int) = this * 1.5.pow(times.toDouble())\n\n    val Int.dot get() = this dot 1\n\n    @Tested\n    operator fun Int.invoke(block: MiderDSL.() -> Unit) {\n        val cachePitch = pitch\n        pitch = this\n        block()\n        pitch = cachePitch\n    }\n\n    @Tested\n    operator fun Char.invoke(block: MiderDSL.() -> Unit) {\n        val cacheDuration = duration\n        duration = 1.0 / (this.code - 48)\n        block()\n        duration = cacheDuration\n    }\n\n    operator fun <R> (() -> R).times(times: Int) {\n        for (i in 0 until times) this()\n    }\n\n    operator fun String.unaryPlus() {\n        this()\n    }\n\n    //todo\n    operator fun String.invoke(isStave: Boolean = true, useMacro: Boolean = true, config: MacroConfiguration = MacroConfiguration()) {\n        container += toInMusicScoreList(this, pitch, velocity, onVelocity, offVelocity, duration, isStave, channel, gap, useMacro, useMandarinOnomatopoeia, config)\n    }\n\n    @Tested\n    operator fun String.invoke(block: MiderDSL.() -> Unit) {\n        // use Mode\n        val prefix = if (first() in \"+-b#\") {\n            first().toString()\n        } else \"\"\n\n        val name = (if (first() in \"+-b#\") {\n            substring(1, length)\n        } else this)[0].toString()\n\n        val mode = (if (first() in \"+-b#\") {\n            substring(2, length)\n        } else substring(1, length))\n\n        val notes = inserted(block)\n\n        when(mode) {\n            // 同名小调\n            \"min\", \"minor\" -> {\n\n                val mapper = minorScaleMapper(prefix + name)\n                if (mapper.isEmpty()) {\n                    container += notes\n                    return\n                }\n\n                val matches = mapper.map {\n                    it.replace(Regex(\"[+\\\\-#b]\"), \"\") to (it.charCount('+', '#') - it.charCount('-', 'b'))\n                }\n\n                val mapperNames = matches.map { modeCfg -> modeCfg.first }\n\n                notes.operationExtendNotes {\n                    if (!it.isNature && it.actualName in mapperNames) {\n                        val alter = matches.find { pair -> it.actualName == pair.first }!!.second\n                        if (alter > 0) it.sharp(alter) else if (alter < 0) it.flap(-alter)\n                    }\n                }\n\n                container += notes\n            }\n\n            \"maj\", \"major\", \"\" -> {\n                val offset = noteBaseOffset(prefix.replace(\"+\", \"#\").replace(\"-\", \"b\") + name)\n                if (offset == 0) {\n                    container += notes\n                    return\n                }\n\n                notes.operationExtendNotes {\n                    if (!it.isNature) {\n                        it.sharp(offset)\n                    }\n                }\n\n                container += notes\n            }\n\n            else -> TODO(\"not yet implement\")\n        }\n    }\n\n    @Tested\n    operator fun <IM: InMusicScore> Int.times(im: IM): IM {\n        for (index in 0 until this - 1)\n            container += im.clone()\n        return im\n    }\n\n    @Tested\n    infix fun <IM : InMusicScore> IM.dot(times: Int): IM {\n        this.duration.points(times)\n        return this\n    }\n\n    @Tested\n    val <IM : InMusicScore> IM.dot get() = this dot 1\n\n    val <IM : InMusicScore> IM.double: IM get() {\n        this.duration.double\n        return this\n    }\n\n    val <IM : InMusicScore> IM.halve: IM get() {\n        this.duration.halve\n        return this\n    }\n\n    @Tested\n    operator fun <IM : InMusicScore> IM.times(value: Number): IM {\n        this.duration.multiple = value.toDouble()\n        return this\n    }\n\n    @Tested\n    operator fun <IM : InMusicScore> IM.div(value: Number): IM {\n        this.duration.denominator = value.toDouble()\n        return this\n    }\n\n    @Tested\n    operator fun <NC : NoteContainer> NC.plus(note: Note): NC {\n        container - 1\n        this += note\n        return this\n    }\n\n    @Tested\n    operator fun <NC : NoteContainer> NC.minus(note: Note): NC {\n        container - 1\n        this -= note\n        return this\n    }\n\n    @Tested\n    operator fun <IM: InMusicScore> IM.getValue(nothing: Nothing?, property: KProperty<*>): IM {\n        val im: IM = (entrusted[property.name]?.let {\n            val clone = it.clone()\n            container += clone\n            clone\n        } ?: throw Exception(\"id ${property.name} is miss match\")) as IM\n\n        return im\n    }\n\n    @Tested\n    infix fun <IM: InMusicScore> IM.into(id: String): IM {\n        entrusted[id] = this.clone()\n        container - 1\n        return this\n    }\n\n    operator fun <IM> Rest.plus(im: IM): IM = im\n\n    @Tested\n    infix fun Glissando.gliss(note: Note): Glissando = this + note\n\n    @Tested\n    val Glissando.wave: Glissando get() {\n        isWave = true\n        return this\n    }\n\n    val Glissando.hasBlack: Glissando get() {\n        isContainBlack = true\n        return this\n    }\n\n    @Tested\n    val Appoggiatura.back: Appoggiatura get() {\n        isFront = false\n        return this\n    }\n\n    @Tested\n    operator fun Chord.plus(pitch: Int): Chord {\n        notes.forEach { it += pitch }\n        return this\n    }\n\n    @Tested\n    operator fun Chord.minus(pitch: Int): Chord {\n        notes.forEach { it -= pitch }\n        return this\n    }\n\n    @Tested\n    operator fun Chord.div(note: Note): Chord {\n\n        container - 1\n\n        if (note.actualCode % 12 !in notes.map { it.actualCode % 12 })\n            throw Exception(\"given note: ${note.name} not in $this\")\n\n        val target = notes.find { note.actualCode % 12 == it.actualCode % 12 }\n        target?.let { b ->\n            notes.forEach {\n                if (it.actualCode < b.actualCode) {\n                    it.pitch ++\n                }\n            }\n        } ?: throw Exception(\"given note: ${note.actualName} not in $this\")\n\n        return this\n    }\n\n    infix fun Chord.inverse(note: Note): Chord = this / note\n\n    val Chord.sus4: Chord get() {\n\n        when(notes[1].actualCode - rootNote.actualCode) {\n            4 -> notes[1].sharp()\n            3 -> notes[1].sharp(2)\n            else -> {\n                throw Exception(\"this chord did not contain a three degree note from root\")\n            }\n        }\n        return this\n    }\n\n    @Tested\n    val Chord.sus: Chord get() = sus4\n\n    @Tested\n    val Chord.sus2: Chord get() {\n\n        when(notes[1].actualCode - rootNote.actualCode) {\n            4 -> notes[1].flap(2)\n            3 -> notes[1].flap()\n            else -> {\n                throw Exception(\"this chord did not contain a three degree note from root\")\n            }\n        }\n\n        return this\n    }\n\n    @Tested\n    val Chord.ascending: Chord get() {\n        this.arpeggio = ArpeggioType.Ascending\n        return this\n    }\n\n    @Tested\n    val Chord.downward: Chord get() {\n        this.arpeggio = ArpeggioType.Downward\n        return this\n    }\n\n    @Tested\n    operator fun Note.plus(pitch: Int): Note {\n        this += pitch\n        return this\n    }\n\n    @Tested\n    operator fun Note.minus(pitch: Int): Note {\n        this -= pitch\n        return this\n    }\n\n    operator fun Note.minus(note: Note): Int {\n        val interval = this.actualCode - note.actualCode\n        container - 2\n        return interval\n    }\n\n    @Tested\n    operator fun Note.not(): Note {\n        this.isNature = true\n        return this\n    }\n\n    @Tested\n    operator fun Note.get(pitch: Int, multiple: Number = .25): Note {\n        this.pitch = pitch\n        this.duration.default = multiple.toDouble()\n        return this\n    }\n\n    @Tested\n    operator fun Note.get(lyric: String): Note {\n        multiLyricResolve(lyric, container.currentList)\n//        attach = NoteAttach(lyric = lyric)\n        return this\n    }\n\n    @Tested\n    operator fun Note.unaryPlus(): Note {\n        sharp()\n        return this\n    }\n\n    @Tested\n    operator fun Note.unaryMinus(): Note {\n        flap()\n        return this\n    }\n\n    @Tested\n    operator fun Note.rem(value: Int): Note {\n        this.velocity = value\n        return this\n    }\n\n    @Tested\n    operator fun Note.plus(note: Note): Chord {\n        val chord = Chord(this, note)\n        container - 2\n        container += chord\n        return chord\n    }\n\n    @Tested\n    operator fun Note.rangeTo(note: Note): Scale {\n        val scale = Scale.generate(this, note)\n        container - 2\n        container += scale\n        return scale\n    }\n\n    @Tested\n    infix fun Note.triad(mode: Array<Int>): Chord {\n        val second = clone()\n        second.up(mode[0])\n        val third = second.clone()\n        third.up(mode[1])\n\n        val chord = Chord(this, second, third)\n        container - 1\n        container += chord\n        return chord\n    }\n\n    @Tested\n    infix fun Note.seventh(mode: Array<Int>): Chord {\n        val tr = this triad mode\n        val fourth = tr.last().clone()\n        fourth.up(mode[2])\n        tr += fourth\n        return tr\n    }\n\n    @Tested\n    infix fun Note.add9(mode: Array<Int>): Chord {\n        val tr = this triad mode\n        val fourth = tr.last().clone()\n        fourth.up(mode[2] + mode[3])\n        tr += fourth\n        return tr\n    }\n\n    @Tested\n    infix fun Note.ninths(mode: Array<Int>): Chord {\n        val se = this seventh mode\n        val fifth = se.last().clone()\n        fifth.up(mode[3])\n        se += fifth\n        return se\n    }\n\n    @Tested\n    infix fun Note.gliss(note: Note): Glissando {\n        val gliss = Glissando(this, note)\n        container - 2\n        container += gliss\n        return gliss\n    }\n\n    @Tested\n    infix fun Note.appoggiatura(note: Note): Appoggiatura {\n        val app = Appoggiatura(this, note)\n        container - 2\n        container += app\n        return app\n    }\n\n    override fun toString(): String = \"大弦嘈嘈如急雨，小弦切切如私语。嘈嘈切切错杂弹，大珠小珠落玉盘。\"\n}","package org.mider.dsl\n\ninterface DispatcherControlled\n\nclass NormalChannelDispatcher {\n\n//    private val availableChannel = arrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14)\n    private val used = mutableMapOf<Int, DispatcherControlled?>(\n        1 to null,\n        2 to null,\n        3 to null,\n        4 to null,\n        5 to null,\n        6 to null,\n        8 to null,\n        9 to null,\n        11 to null,\n        12 to null,\n        13 to null,\n        14 to null,\n        15 to null\n    )\n\n    private val useChannel0 = mutableSetOf<DispatcherControlled>()\n\n    private val controlList = mutableSetOf<DispatcherControlled>()\n\n\n    /**\n     * 如果 1~15 (排除 10) 号通道中有 track 使用了则返回这个 track 用的通道\n     */\n    fun getChannel(dc: DispatcherControlled): Int {\n        return if (used.containsValue(dc)) {\n            used.filter { it.value == dc }.keys.first()\n        } else {\n            val filter = used.filter { it.value == null }\n            if (filter.isEmpty()) {\n                useChannel0 += dc\n                0\n            } else {\n                val first = filter.keys.first()\n                used[first] = dc\n                first\n            }\n        }\n    }\n\n    fun mount(dc: DispatcherControlled) {\n        controlList += dc\n    }\n}\n","package org.mider.dsl\n\nimport org.mider.MetaEventType\nimport org.mider.MidiFile\nimport org.mider.convert2MidiMessages\nimport org.mider.convert2MusicXml\nimport org.mider.descr.InMusicScore\nimport org.mider.xml.MusicXml\n//import java.io.File\n//import java.util.*\n//import javax.sound.midi.MidiSystem\n//import javax.sound.midi.Sequencer\n//import kotlin.concurrent.timerTask\nimport kotlin.math.log2\n\nfun fromDslInstance(dsl: MiderDSL): MidiFile {\n    val wholeTicks = 960 * 2 * 2\n    val clock: Byte = 18\n    val midi = MidiFile()\n\n    fun MidiFile.addTrack(dslObj: MiderDSL) {\n        track {\n            dslObj.container.mainList\n                .convert2MidiMessages(\n                    wholeTicks,\n                    volume = dslObj.volume,\n                    config = dslObj.convert2MidiEventConfig\n                )\n                .forEach {\n                    append(it)\n                }\n            end()\n        }\n    }\n\n    midi.append {\n        track {\n            tempo(dsl.bpm)\n\n            dsl.timeSignature?.let {\n                meta(\n                    MetaEventType.META_TIME_SIGNATURE,\n                    it.first.toByte(),\n                    log2(it.second.toDouble()).toInt().toByte(),\n                    clock, 8\n                )\n            }\n\n            end()\n        }\n\n        addTrack(dsl)\n\n        if (dsl.otherTracks.isNotEmpty()) {\n            dsl.otherTracks.forEach {\n                addTrack(it)\n            }\n        }\n    }\n\n    return midi\n}\n\nfun dsl2MusicXml(dsl: MiderDSL, divisions: Int = 480): MusicXml {\n    // todo 将 track 和 part 对应\n    val allTracks = mutableListOf<InMusicScore>()\n    allTracks += dsl.container.mainList\n    dsl.otherTracks.forEach {\n        allTracks += it.container.mainList\n    }\n\n    return allTracks.convert2MusicXml(dsl.bpm,\n        dsl.timeSignature?.first ?: 4,\n        dsl.timeSignature?.second ?: 4,\n        divisions,\n        dsl.keySignature\n    )\n}\n\nfun fromDsl(block: MiderDSL.() -> Unit): MidiFile {\n    val dsl = MiderDSL()\n    dsl.block()\n    return fromDslInstance(dsl)\n}\n\n","package org.mider.impl\n\nopen class Stack<T> : Iterable<T> {\n    private val insideList: MutableList<T> = mutableListOf()\n\n    fun push(element: T) {\n        insideList += element\n    }\n\n    fun pop(): T {\n        return insideList.removeLast()\n    }\n\n    fun popTillEmpty(): List<T> {\n        val ret = mutableListOf<T>()\n        for (e in 0 ..< insideList.size)\n            ret += pop()\n        return ret\n    }\n\n    fun popTillEmptyFromStart(): List<T> {\n        val ret = mutableListOf<T>()\n        for (e in 0 ..< insideList.size)\n            ret += insideList.removeFirst()\n        return ret\n    }\n\n    fun top(): T {\n        return insideList.last()\n    }\n\n    fun isNotEmpty(): Boolean {\n        return insideList.isNotEmpty()\n    }\n\n    fun clear() {\n        insideList.clear()\n    }\n\n    fun getPrototype() = insideList\n\n    override fun iterator(): Iterator<T> {\n        return insideList.iterator()\n    }\n}","package org.mider.lyric\n\nimport org.mider.code.getLyricAffectedNotes\nimport org.mider.descr.*\n\nfun multiLyricResolve(lyric: String, list: List<InMusicScore>) {\n    val words = lyric.split(\" \")\n    val affectNotes = getLyricAffectedNotes(list, words.size)\n    affectNotes.forEachIndexed { lyricIndex, noc ->\n        words[lyricIndex].let {\n            if (it != \"_\") {\n                when (noc) {\n                    is Note -> noc.attach = NoteAttach(lyric = it)\n                    is Chord -> noc.attach = ChordAttach(lyric = it)\n                }\n            }\n        }\n    }\n}",null,"package org.mider.xml\n\nclass NodeContent {\n    var contentIsNodes: Boolean = false\n    var contentString: String = \"\"\n    var nodes: MutableList<Node> = mutableListOf()\n\n    constructor(str: String = \"\") {\n        contentString = str\n        if (contentString == \"\") contentIsNodes = true\n    }\n\n    constructor(lists: MutableList<Node>) {\n        nodes = lists\n        contentIsNodes = true\n    }\n\n    constructor(node: Node) : this(mutableListOf(node))\n\n    operator fun plusAssign(node: Node) {\n        nodes += node\n    }\n}\n\nopen class DeepNode(name: String, vararg attributes: Pair<String, Any>) : Node(name, *attributes) {\n    init {\n        contentIsNode = true\n    }\n}\n\nopen class Node (\n    val name: String,\n    val attributes: MutableMap<String, Any> = mutableMapOf(),\n    val children: NodeContent = NodeContent(),\n    var parent: Node? = null\n) {\n\n    constructor(name: String, attributes: MutableMap<String, Any>, content: String)\n        : this (name, attributes, NodeContent(content))\n    constructor(name: String, attributes: MutableMap<String, Any>, content: MutableList<Node>)\n        : this (name, attributes, NodeContent(content))\n    constructor(name: String, attributes: MutableMap<String, Any>, content: Node)\n        : this (name, attributes, NodeContent(content))\n    constructor(name: String, attributes: MutableMap<String, Any>, vararg content: Node)\n        : this (name, attributes, content.toMutableList())\n    constructor(name: String, vararg content: Node)\n        : this (name, mutableMapOf(), content.toMutableList())\n    constructor(name: String, vararg attributes: Pair<String, Any>)\n        : this (name, attributes.toMap().toMutableMap(), \"\")\n    constructor(name: String, content: String)\n        : this (name, mutableMapOf(), content)\n    constructor(name: String, content: Number)\n        : this (name, mutableMapOf(), content.toString())\n    constructor(name: String, content: Boolean)\n        : this (name, mutableMapOf(), content.toString())\n    constructor(name: String)\n        : this (name, mutableMapOf(), \"\")\n\n    var contentIsNode = children.contentIsNodes\n\n    operator fun plusAssign(node: Node) {\n        children += node\n        node.parent = this\n    }\n\n    operator fun get(tagName: String) = children.nodes.filter { name == tagName }\n\n    operator fun get(index: Int) = children.nodes[index]\n\n    operator fun set(index: Int, value: Node) {\n        children.nodes[index] = value\n    }\n\n    override fun toString(): String =\n        \"<$name${ \n            if (attributes.isNotEmpty()) \n                \" \" + attributes.map { \n                    it.key + \"=\" + \"\\\"\" + it.value + \"\\\"\" /*when(it.value) {\n                        is CharSequence, Char -> \n                        else -> it.value\n                    }*/\n                }.joinToString(\" \") \n            else \"\"\n        }>\" +\n                (if (contentIsNode) children.nodes.joinToString(\"\") else children.contentString) +\n        \"</$name>\"\n}","import kotlinx.browser.window\nimport org.khronos.webgl.Uint8Array\nimport org.mider.code.MiderCodeParserConfiguration\nimport org.mider.code.produceCore\nimport org.mider.dsl.MiderDSL\nimport org.mider.dsl.dsl2MusicXml\nimport org.mider.dsl.fromDsl\nimport org.mider.dsl.fromDslInstance\n\n\nfun genMidiBuffer(code: String, cfg: MiderCodeParserConfiguration = MiderCodeParserConfiguration()): Uint8Array {\n    return fromDslInstance(produceCore(code, cfg).miderDSL).doFinal().prototype\n}\n\nfun genMusicXml(code: String, cfg: MiderCodeParserConfiguration = MiderCodeParserConfiguration(), divisions: Int = 480): String {\n    return dsl2MusicXml(produceCore(code, cfg).miderDSL, divisions).toString()\n}\n\nfun main() {\n    console.log(\"mider loaded!\")\n    val dw: dynamic = window\n    dw.miderGenMidiBuffer = ::genMidiBuffer\n    dw.miderGenMusicXml = ::genMusicXml\n    dw.miderMiderCodeParserConfiguration = ::MiderCodeParserConfiguration\n}","package org.mider.expect\n\nimport org.khronos.webgl.Uint8Array\nimport org.khronos.webgl.get\nimport org.khronos.webgl.set\n\nactual class ByteBuffer actual constructor(capacity: Int) {\n    private val buffer: Uint8Array = Uint8Array(capacity)\n    private var position: Int = 0\n    val prototype: Uint8Array get() = buffer\n\n    actual companion object {\n        actual fun allocate(occupied: Int): ByteBuffer = ByteBuffer(occupied)\n    }\n\n    actual fun put(byte: Byte) {\n        buffer[position] = byte\n        position ++\n    }\n\n    actual fun put(bytes: ByteArray) {\n        buffer.set(bytes.toTypedArray(), position)\n        position += bytes.size\n    }\n\n    actual fun put(buff: ByteBuffer) {\n         buffer.set(buff.buffer, position)\n         position += buff.position\n    }\n\n    actual fun clear() {\n        for (e in 0 ..< position) buffer[e] = 0\n    }\n\n    actual fun flip() {\n        position = 0\n    }\n\n    actual fun get(dst: ByteArray, offset: Int, length: Int) {\n        var i = 0\n        for (e in offset ..< length)\n            dst[i++] = buffer[e]\n    }\n\n    fun getByteBuffer(dst: ByteBuffer, offset: Int, length: Int): ByteBuffer {\n        val ret = ByteBuffer(length)\n        for (e in offset ..< length)\n            ret.put(buffer[e])\n        return ret\n    }\n}",null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(241);\n"],"names":["root","factory","exports","module","define","amd","this","a","x","searchString","position","b","<this>","element","index","separator","prefix","postfix","limit","truncated","transform","buffer","count","destination","item","maximumValue","minimumValue","to","list","fromIndex","toIndex","$entryIterator","o","key","values","isVarargs","default","pairs","value","sequence","transformer","getInitialValue","getNextValue","c","mod","start","endInclusive","first","last","step","end","other","ignoreCase","thisUpper","otherUpper","bytesPerLine","bytesPerGroup","groupSeparator","byteSeparator","bytePrefix","byteSuffix","suffix","removeLeadingZeros","upperCase","bytes","number","radix","isNegative","length","firstChar","limitForMaxRadix","limitBeforeMul","result","i","digit","input","char","startIndex","chars","charAtIndex","string","range","endIndex","indices","match","getNextMatch","thisOffset","otherOffset","message","second","that","collection","array","iterator","elements","initialCapacity","loadFactor","comparator","median","left","right","target","leftIndex","rightIndex","leftValue","rightValue","internalMap","map","chainOrEntry","entry","hashCode","equality","outputStream","isNode","capacity","content","uppercase","ch","diff","needle","bottom","top","middle","pattern","options","prepend","from","nextPattern","replacement","groupName","groups","groupIndex","name","groupCount","newGroupIndex","it","$match","$range","$nextPattern","$input","n1","n2","min","thisChar","otherChar","high","throwOnMalformed","low","size","ordinal","interfaces","maxSize","masks","currentSize","imask","iid","iidImask","mask","activeBit","intArray","numberIndex","numberWithSettledBit","arr","$array","obj","ia","hash","descriptor","str","code","obj1","obj2","instance","constructorFunction","constructor","proto","this_","cause","errorInfo","v","thisNeg","otherNeg","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","numBits","radixLong","div","rem","digitsPerTime","radixToPower","remDiv","digits","twoPwr32","associatedObjectKey","associatedObjects","suspendArity","kind","ctor","metadataConstructor","parent","metadata","iface","possibleActiveBit","parentProto","propName","e","otherIterator","ourValue","n","thisRef","property","rangeStart","rangeEnd","sb","indent","modified","newValue","oldValue","amount","previous","offset","value1","value2","chainSize","lastEntry","chain","current","node","old","newEntry","_head","_tail","messageString","s","reversed","stringCsq","literal","$startIndex","$replacement","lastStart","foundMatch","nonGlobalOptions","matches","code1","code2","approx","res","approxDouble","approx2","log2","delta","approxRes","approxRem","bitCount","args","size_local","j","midPoint","reverseIndex","tmp","comparison","$comparator","original","paramCount","superType","getter","setter","dst","byteIndex","charIndex","codePoint","newSize","src","srcLen","dstLen","delimiters","delimiter","currentOffset","nextIndex","isLimited","$delimitersList","$ignoreCase","delimitersList","$this$$receiver","currentIndex","strings","single","format","removeZeros","shift","decimal","startFound","times","pitch","note","operateCode","type","track","asvlByteArray","data","previousTicks","encodeToByteArray","eventType","time","channel","Event","event","metaEvent","status","id","trackdiv","bufferSize","debugOutput","seq","config","MacroConfiguration","$outerScope","$config","outerScope","macroScope","innerScopeExecute","symbol","outerScopeExecute","$macroScope","spl","split","params","body","joinToString","arguments","toMutableList","removeFirst","replace","toInt","macro","funcName","toList","ret","toString","stack","Stack","buildStack","stackChar","replaceFirst","innerBuildStack","undetermined","contains","charCount","buildStackString","startsWith","LoggerImpl","println","formatMode","isBlankReplaceWith0","macroConfiguration","convertMidiEventConfiguration","ConvertMidiEventConfiguration","afterMacro","isStave","isUpper","chord","$list","$tie","beAdded","removeLast","velocity","$chord","$isStave","$main","Appoggiatura","$glissando","miderDSL","isRenderingNotation","isUploadMidi","notationType","isSing","singSong","logs","MiderDSL","msg","MiderCodeParserConfiguration","noteLists","$noteLists","$configParts","configParts","build","$this$null","$this_null","changeBpm","tempo","changeTimeSignature","pair","ProduceCoreResult","$changeBpm","$changeTimeSignature","$item","$this$track","mode","ts","valueOf","ss","p","toDouble","$execBlock","execBlock","$this_track","$sequence","$this$invoke","divisions","toNoteElement","durationInDivision","one","NotationElement","duration","mutableListOf","givenDuration","autoAlter","setDurationType","aAlter","toByte","modifyChannel","$wholeTicks","toLong","$volume","msgs","$element","$this$measure","main","isFront","firstNotes","lyric","Attach","bar","dot","denominator","DurationDescribe","hexData","octave","miderDefaultDuration","noteBaseOffset","isNature","alter","innerAttach","gap","<set-?>","receiver","ticks","relative","inputNotes","noteList","dispatcher","NormalChannelDispatcher","InMusicScoreContainer","mutableMapOf","wholeTicks","dslObj","$dslObj","volume","noteOnMessage","noteOffMessage","tpList","notes","sortWith","previousCount","allList","notesCount","countScale","rScale","convert2MidiMessages","words","affectNotes","lyrics","counter","getLyricAffectedNotes","as1lByteArray","op","cmp","scale","sum","maxBit","nextChar","toBeFound","plus","minus","int","subStringCount","version","DeepNode","perMinute","beatUnit","text","measure","part","doctype","ScorePartWiseElement","lists","attributes","toMutableMap","toMap","children","cfg","dsl","allTracks","beats","beatType","keySignature","$beats","$divisions","$beatType","$keySignature","$tempo","xmlObj","MusicXml","$this$part","allMeasureList","measureTicks","aMeasureCount","aMeasureList","addLater","separate","firstMeasure","$firstMeasure","ks","rMode","fifths","toMusicXmlKeySignature","DirectionElement","convert2MusicXml","dsl2MusicXml","produceCore","Uint8Array","block","as4lByteArray","as2lByteArray","metaEventType","MetaEvent","bpm","ib","resultSet","given","cloneNotes","Chord","calc","describe","copy","Glissando","contentHashCode","InMusicScoreMidiNormalEvent","wholeTick","defaultOctave","defaultVelocity","defaultDuration","toByteArray","operation","lnWTDivDD","intAbove","durationSymbolsToMultiple","timeDesc","toIntOrNull","instrument","parameter","asMetaEventData","parseToMidiHex","showHex","hex","noteNameFromCode","noteNameFromCodeFlat","addPitch","nextNoteIntervalInMajorScale","previousNoteIntervalInMajorScale","Note","NoteAttach","Rest","Scale","loopc","TieNote","im","ims","new","cache","useMacro","iPitch","iVelocity","iOnVelocity","iOffVelocity","iDurationDefault","iIsStave","iDefaultChannel","iDefaultGap","iUseMandarinOnomatopoeia","onVelocity","offVelocity","durationDefault","useMandarinOnomatopoeia","defaultChannel","defaultGap","doAfter","ActionStack","skipper","deriveInterval","t","tie","nextOnlyInt","onOrOffOrNone","indexOffset","givenVelocity","nextGivenChar","multiLyricResolve","inBraces","removePrefix","kv","k","toBoolean","g","glissando","multiple","toInMusicScoreList","$offset","$mapperNames","$matches","mapper","minorScaleMapper","operationExtendNotes","dc","filter","byte","sign","line","syllabic","PitchElement","LyricElement","notation","typeName","attr","direction","MeasureElement","Measure","PartElement","Part","occupied","ByteBuffer","set","toTypedArray","console","log","dw","window","miderGenMidiBuffer","$dsl","midi","MidiFile","fromDslInstance","miderGenMusicXml","miderMiderCodeParserConfiguration","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}